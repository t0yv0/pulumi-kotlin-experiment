// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights;

import com.pulumi.azurenative.Utilities;
import com.pulumi.azurenative.insights.MetricAlertArgs;
import com.pulumi.azurenative.insights.outputs.MetricAlertActionResponse;
import com.pulumi.azurenative.insights.outputs.MetricAlertMultipleResourceMultipleMetricCriteriaResponse;
import com.pulumi.azurenative.insights.outputs.MetricAlertSingleResourceMultipleMetricCriteriaResponse;
import com.pulumi.azurenative.insights.outputs.WebtestLocationAvailabilityCriteriaResponse;
import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The metric alert resource.
 * API Version: 2018-03-01.
 * 
 * ## Example Usage
 * ### Create or update a dynamic alert rule for Multiple Resources
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azurenative.insights.MetricAlert;
 * import com.pulumi.azurenative.insights.MetricAlertArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var metricAlert = new MetricAlert(&#34;metricAlert&#34;, MetricAlertArgs.builder()        
 *             .actions(Map.ofEntries(
 *                 Map.entry(&#34;actionGroupId&#34;, &#34;/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2&#34;),
 *                 Map.entry(&#34;webHookProperties&#34;, Map.ofEntries(
 *                     Map.entry(&#34;key11&#34;, &#34;value11&#34;),
 *                     Map.entry(&#34;key12&#34;, &#34;value12&#34;)
 *                 ))
 *             ))
 *             .autoMitigate(true)
 *             .criteria(Map.ofEntries(
 *                 Map.entry(&#34;allOf&#34;, Map.ofEntries(
 *                     Map.entry(&#34;alertSensitivity&#34;, &#34;Medium&#34;),
 *                     Map.entry(&#34;criterionType&#34;, &#34;DynamicThresholdCriterion&#34;),
 *                     Map.entry(&#34;dimensions&#34;, ),
 *                     Map.entry(&#34;failingPeriods&#34;, Map.ofEntries(
 *                         Map.entry(&#34;minFailingPeriodsToAlert&#34;, 4),
 *                         Map.entry(&#34;numberOfEvaluationPeriods&#34;, 4)
 *                     )),
 *                     Map.entry(&#34;metricName&#34;, &#34;Percentage CPU&#34;),
 *                     Map.entry(&#34;metricNamespace&#34;, &#34;microsoft.compute/virtualmachines&#34;),
 *                     Map.entry(&#34;name&#34;, &#34;High_CPU_80&#34;),
 *                     Map.entry(&#34;operator&#34;, &#34;GreaterOrLessThan&#34;),
 *                     Map.entry(&#34;timeAggregation&#34;, &#34;Average&#34;)
 *                 )),
 *                 Map.entry(&#34;odataType&#34;, &#34;Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria&#34;)
 *             ))
 *             .description(&#34;This is the description of the rule1&#34;)
 *             .enabled(true)
 *             .evaluationFrequency(&#34;PT1M&#34;)
 *             .location(&#34;global&#34;)
 *             .resourceGroupName(&#34;gigtest&#34;)
 *             .ruleName(&#34;MetricAlertOnMultipleResources&#34;)
 *             .scopes(            
 *                 &#34;/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1&#34;,
 *                 &#34;/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2&#34;)
 *             .severity(3)
 *             .tags()
 *             .targetResourceRegion(&#34;southcentralus&#34;)
 *             .targetResourceType(&#34;Microsoft.Compute/virtualMachines&#34;)
 *             .windowSize(&#34;PT15M&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create or update a dynamic alert rule for Single Resource
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azurenative.insights.MetricAlert;
 * import com.pulumi.azurenative.insights.MetricAlertArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var metricAlert = new MetricAlert(&#34;metricAlert&#34;, MetricAlertArgs.builder()        
 *             .actions(Map.ofEntries(
 *                 Map.entry(&#34;actionGroupId&#34;, &#34;/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2&#34;),
 *                 Map.entry(&#34;webHookProperties&#34;, Map.ofEntries(
 *                     Map.entry(&#34;key11&#34;, &#34;value11&#34;),
 *                     Map.entry(&#34;key12&#34;, &#34;value12&#34;)
 *                 ))
 *             ))
 *             .autoMitigate(true)
 *             .criteria(Map.ofEntries(
 *                 Map.entry(&#34;allOf&#34;, Map.ofEntries(
 *                     Map.entry(&#34;alertSensitivity&#34;, &#34;Medium&#34;),
 *                     Map.entry(&#34;criterionType&#34;, &#34;DynamicThresholdCriterion&#34;),
 *                     Map.entry(&#34;dimensions&#34;, ),
 *                     Map.entry(&#34;failingPeriods&#34;, Map.ofEntries(
 *                         Map.entry(&#34;minFailingPeriodsToAlert&#34;, 4),
 *                         Map.entry(&#34;numberOfEvaluationPeriods&#34;, 4)
 *                     )),
 *                     Map.entry(&#34;ignoreDataBefore&#34;, &#34;2019-04-04T21:00:00.000Z&#34;),
 *                     Map.entry(&#34;metricName&#34;, &#34;Percentage CPU&#34;),
 *                     Map.entry(&#34;metricNamespace&#34;, &#34;microsoft.compute/virtualmachines&#34;),
 *                     Map.entry(&#34;name&#34;, &#34;High_CPU_80&#34;),
 *                     Map.entry(&#34;operator&#34;, &#34;GreaterOrLessThan&#34;),
 *                     Map.entry(&#34;timeAggregation&#34;, &#34;Average&#34;)
 *                 )),
 *                 Map.entry(&#34;odataType&#34;, &#34;Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria&#34;)
 *             ))
 *             .description(&#34;This is the description of the rule1&#34;)
 *             .enabled(true)
 *             .evaluationFrequency(&#34;PT1M&#34;)
 *             .location(&#34;global&#34;)
 *             .resourceGroupName(&#34;gigtest&#34;)
 *             .ruleName(&#34;chiricutin&#34;)
 *             .scopes(&#34;/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme&#34;)
 *             .severity(3)
 *             .tags()
 *             .windowSize(&#34;PT15M&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create or update a web test alert rule
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azurenative.insights.MetricAlert;
 * import com.pulumi.azurenative.insights.MetricAlertArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var metricAlert = new MetricAlert(&#34;metricAlert&#34;, MetricAlertArgs.builder()        
 *             .actions()
 *             .criteria(Map.ofEntries(
 *                 Map.entry(&#34;componentId&#34;, &#34;/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example&#34;),
 *                 Map.entry(&#34;failedLocationCount&#34;, 2),
 *                 Map.entry(&#34;odataType&#34;, &#34;Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria&#34;),
 *                 Map.entry(&#34;webTestId&#34;, &#34;/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example&#34;)
 *             ))
 *             .description(&#34;Automatically created alert rule for availability test \&#34;component-example\&#34; a&#34;)
 *             .enabled(true)
 *             .evaluationFrequency(&#34;PT1M&#34;)
 *             .location(&#34;global&#34;)
 *             .resourceGroupName(&#34;rg-example&#34;)
 *             .ruleName(&#34;webtest-name-example&#34;)
 *             .scopes(            
 *                 &#34;/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example&#34;,
 *                 &#34;/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example&#34;)
 *             .severity(4)
 *             .tags(Map.ofEntries(
 *                 Map.entry(&#34;hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example&#34;, &#34;Resource&#34;),
 *                 Map.entry(&#34;hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example&#34;, &#34;Resource&#34;)
 *             ))
 *             .windowSize(&#34;PT15M&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create or update an alert rule for Multiple Resource
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azurenative.insights.MetricAlert;
 * import com.pulumi.azurenative.insights.MetricAlertArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var metricAlert = new MetricAlert(&#34;metricAlert&#34;, MetricAlertArgs.builder()        
 *             .actions(Map.ofEntries(
 *                 Map.entry(&#34;actionGroupId&#34;, &#34;/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2&#34;),
 *                 Map.entry(&#34;webHookProperties&#34;, Map.ofEntries(
 *                     Map.entry(&#34;key11&#34;, &#34;value11&#34;),
 *                     Map.entry(&#34;key12&#34;, &#34;value12&#34;)
 *                 ))
 *             ))
 *             .autoMitigate(true)
 *             .criteria(Map.ofEntries(
 *                 Map.entry(&#34;allOf&#34;, Map.ofEntries(
 *                     Map.entry(&#34;criterionType&#34;, &#34;StaticThresholdCriterion&#34;),
 *                     Map.entry(&#34;dimensions&#34;, ),
 *                     Map.entry(&#34;metricName&#34;, &#34;Percentage CPU&#34;),
 *                     Map.entry(&#34;metricNamespace&#34;, &#34;microsoft.compute/virtualmachines&#34;),
 *                     Map.entry(&#34;name&#34;, &#34;High_CPU_80&#34;),
 *                     Map.entry(&#34;operator&#34;, &#34;GreaterThan&#34;),
 *                     Map.entry(&#34;threshold&#34;, 80.5),
 *                     Map.entry(&#34;timeAggregation&#34;, &#34;Average&#34;)
 *                 )),
 *                 Map.entry(&#34;odataType&#34;, &#34;Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria&#34;)
 *             ))
 *             .description(&#34;This is the description of the rule1&#34;)
 *             .enabled(true)
 *             .evaluationFrequency(&#34;PT1M&#34;)
 *             .location(&#34;global&#34;)
 *             .resourceGroupName(&#34;gigtest&#34;)
 *             .ruleName(&#34;MetricAlertOnMultipleResources&#34;)
 *             .scopes(            
 *                 &#34;/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1&#34;,
 *                 &#34;/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2&#34;)
 *             .severity(3)
 *             .tags()
 *             .targetResourceRegion(&#34;southcentralus&#34;)
 *             .targetResourceType(&#34;Microsoft.Compute/virtualMachines&#34;)
 *             .windowSize(&#34;PT15M&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create or update an alert rule for Single Resource
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azurenative.insights.MetricAlert;
 * import com.pulumi.azurenative.insights.MetricAlertArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var metricAlert = new MetricAlert(&#34;metricAlert&#34;, MetricAlertArgs.builder()        
 *             .actions(Map.ofEntries(
 *                 Map.entry(&#34;actionGroupId&#34;, &#34;/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2&#34;),
 *                 Map.entry(&#34;webHookProperties&#34;, Map.ofEntries(
 *                     Map.entry(&#34;key11&#34;, &#34;value11&#34;),
 *                     Map.entry(&#34;key12&#34;, &#34;value12&#34;)
 *                 ))
 *             ))
 *             .autoMitigate(true)
 *             .criteria(Map.ofEntries(
 *                 Map.entry(&#34;allOf&#34;, Map.ofEntries(
 *                     Map.entry(&#34;criterionType&#34;, &#34;StaticThresholdCriterion&#34;),
 *                     Map.entry(&#34;dimensions&#34;, ),
 *                     Map.entry(&#34;metricName&#34;, &#34;\\Processor(_Total)\\% Processor Time&#34;),
 *                     Map.entry(&#34;name&#34;, &#34;High_CPU_80&#34;),
 *                     Map.entry(&#34;operator&#34;, &#34;GreaterThan&#34;),
 *                     Map.entry(&#34;threshold&#34;, 80.5),
 *                     Map.entry(&#34;timeAggregation&#34;, &#34;Average&#34;)
 *                 )),
 *                 Map.entry(&#34;odataType&#34;, &#34;Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria&#34;)
 *             ))
 *             .description(&#34;This is the description of the rule1&#34;)
 *             .enabled(true)
 *             .evaluationFrequency(&#34;Pt1m&#34;)
 *             .location(&#34;global&#34;)
 *             .resourceGroupName(&#34;gigtest&#34;)
 *             .ruleName(&#34;chiricutin&#34;)
 *             .scopes(&#34;/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme&#34;)
 *             .severity(3)
 *             .tags()
 *             .windowSize(&#34;Pt15m&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create or update an alert rule on Resource group(s)
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azurenative.insights.MetricAlert;
 * import com.pulumi.azurenative.insights.MetricAlertArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var metricAlert = new MetricAlert(&#34;metricAlert&#34;, MetricAlertArgs.builder()        
 *             .actions(Map.ofEntries(
 *                 Map.entry(&#34;actionGroupId&#34;, &#34;/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2&#34;),
 *                 Map.entry(&#34;webHookProperties&#34;, Map.ofEntries(
 *                     Map.entry(&#34;key11&#34;, &#34;value11&#34;),
 *                     Map.entry(&#34;key12&#34;, &#34;value12&#34;)
 *                 ))
 *             ))
 *             .autoMitigate(true)
 *             .criteria(Map.ofEntries(
 *                 Map.entry(&#34;allOf&#34;, Map.ofEntries(
 *                     Map.entry(&#34;criterionType&#34;, &#34;StaticThresholdCriterion&#34;),
 *                     Map.entry(&#34;dimensions&#34;, ),
 *                     Map.entry(&#34;metricName&#34;, &#34;Percentage CPU&#34;),
 *                     Map.entry(&#34;metricNamespace&#34;, &#34;microsoft.compute/virtualmachines&#34;),
 *                     Map.entry(&#34;name&#34;, &#34;High_CPU_80&#34;),
 *                     Map.entry(&#34;operator&#34;, &#34;GreaterThan&#34;),
 *                     Map.entry(&#34;threshold&#34;, 80.5),
 *                     Map.entry(&#34;timeAggregation&#34;, &#34;Average&#34;)
 *                 )),
 *                 Map.entry(&#34;odataType&#34;, &#34;Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria&#34;)
 *             ))
 *             .description(&#34;This is the description of the rule1&#34;)
 *             .enabled(true)
 *             .evaluationFrequency(&#34;PT1M&#34;)
 *             .location(&#34;global&#34;)
 *             .resourceGroupName(&#34;gigtest1&#34;)
 *             .ruleName(&#34;MetricAlertAtResourceGroupLevel&#34;)
 *             .scopes(            
 *                 &#34;/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1&#34;,
 *                 &#34;/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest2&#34;)
 *             .severity(3)
 *             .tags()
 *             .targetResourceRegion(&#34;southcentralus&#34;)
 *             .targetResourceType(&#34;Microsoft.Compute/virtualMachines&#34;)
 *             .windowSize(&#34;PT15M&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create or update an alert rule on Subscription
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azurenative.insights.MetricAlert;
 * import com.pulumi.azurenative.insights.MetricAlertArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var metricAlert = new MetricAlert(&#34;metricAlert&#34;, MetricAlertArgs.builder()        
 *             .actions(Map.ofEntries(
 *                 Map.entry(&#34;actionGroupId&#34;, &#34;/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2&#34;),
 *                 Map.entry(&#34;webHookProperties&#34;, Map.ofEntries(
 *                     Map.entry(&#34;key11&#34;, &#34;value11&#34;),
 *                     Map.entry(&#34;key12&#34;, &#34;value12&#34;)
 *                 ))
 *             ))
 *             .autoMitigate(true)
 *             .criteria(Map.ofEntries(
 *                 Map.entry(&#34;allOf&#34;, Map.ofEntries(
 *                     Map.entry(&#34;criterionType&#34;, &#34;StaticThresholdCriterion&#34;),
 *                     Map.entry(&#34;dimensions&#34;, ),
 *                     Map.entry(&#34;metricName&#34;, &#34;Percentage CPU&#34;),
 *                     Map.entry(&#34;metricNamespace&#34;, &#34;microsoft.compute/virtualmachines&#34;),
 *                     Map.entry(&#34;name&#34;, &#34;High_CPU_80&#34;),
 *                     Map.entry(&#34;operator&#34;, &#34;GreaterThan&#34;),
 *                     Map.entry(&#34;threshold&#34;, 80.5),
 *                     Map.entry(&#34;timeAggregation&#34;, &#34;Average&#34;)
 *                 )),
 *                 Map.entry(&#34;odataType&#34;, &#34;Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria&#34;)
 *             ))
 *             .description(&#34;This is the description of the rule1&#34;)
 *             .enabled(true)
 *             .evaluationFrequency(&#34;PT1M&#34;)
 *             .location(&#34;global&#34;)
 *             .resourceGroupName(&#34;gigtest&#34;)
 *             .ruleName(&#34;MetricAlertAtSubscriptionLevel&#34;)
 *             .scopes(&#34;/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7&#34;)
 *             .severity(3)
 *             .tags()
 *             .targetResourceRegion(&#34;southcentralus&#34;)
 *             .targetResourceType(&#34;Microsoft.Compute/virtualMachines&#34;)
 *             .windowSize(&#34;PT15M&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * ### Create or update an alert rules with dimensions
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azurenative.insights.MetricAlert;
 * import com.pulumi.azurenative.insights.MetricAlertArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var metricAlert = new MetricAlert(&#34;metricAlert&#34;, MetricAlertArgs.builder()        
 *             .actions(Map.ofEntries(
 *                 Map.entry(&#34;actionGroupId&#34;, &#34;/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2&#34;),
 *                 Map.entry(&#34;webHookProperties&#34;, Map.ofEntries(
 *                     Map.entry(&#34;key11&#34;, &#34;value11&#34;),
 *                     Map.entry(&#34;key12&#34;, &#34;value12&#34;)
 *                 ))
 *             ))
 *             .autoMitigate(true)
 *             .criteria(Map.ofEntries(
 *                 Map.entry(&#34;allOf&#34;, Map.ofEntries(
 *                     Map.entry(&#34;criterionType&#34;, &#34;StaticThresholdCriterion&#34;),
 *                     Map.entry(&#34;dimensions&#34;,                     
 *                         Map.ofEntries(
 *                             Map.entry(&#34;name&#34;, &#34;ActivityName&#34;),
 *                             Map.entry(&#34;operator&#34;, &#34;Include&#34;),
 *                             Map.entry(&#34;values&#34;, &#34;*&#34;)
 *                         ),
 *                         Map.ofEntries(
 *                             Map.entry(&#34;name&#34;, &#34;StatusCode&#34;),
 *                             Map.entry(&#34;operator&#34;, &#34;Include&#34;),
 *                             Map.entry(&#34;values&#34;, &#34;200&#34;)
 *                         )),
 *                     Map.entry(&#34;metricName&#34;, &#34;Availability&#34;),
 *                     Map.entry(&#34;metricNamespace&#34;, &#34;Microsoft.KeyVault/vaults&#34;),
 *                     Map.entry(&#34;name&#34;, &#34;Metric1&#34;),
 *                     Map.entry(&#34;operator&#34;, &#34;GreaterThan&#34;),
 *                     Map.entry(&#34;threshold&#34;, 55),
 *                     Map.entry(&#34;timeAggregation&#34;, &#34;Average&#34;)
 *                 )),
 *                 Map.entry(&#34;odataType&#34;, &#34;Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria&#34;)
 *             ))
 *             .description(&#34;This is the description of the rule1&#34;)
 *             .enabled(true)
 *             .evaluationFrequency(&#34;PT1H&#34;)
 *             .location(&#34;global&#34;)
 *             .resourceGroupName(&#34;gigtest&#34;)
 *             .ruleName(&#34;MetricAlertOnMultipleDimensions&#34;)
 *             .scopes(&#34;/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.KeyVault/vaults/keyVaultResource&#34;)
 *             .severity(3)
 *             .tags()
 *             .windowSize(&#34;P1D&#34;)
 *             .build());
 * 
 *     }
 * }
 * 
 * ```
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:insights:MetricAlert webtest-name-example /subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/MetricAlertWithDimensions 
 * ```
 * 
 */
@ResourceType(type="azure-native:insights:MetricAlert")
public class MetricAlert extends com.pulumi.resources.CustomResource {
    /**
     * the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
     * 
     */
    @Export(name="actions", type=List.class, parameters={MetricAlertActionResponse.class})
    private Output</* @Nullable */ List<MetricAlertActionResponse>> actions;

    /**
     * @return the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
     * 
     */
    public Output<Optional<List<MetricAlertActionResponse>>> actions() {
        return Codegen.optional(this.actions);
    }
    /**
     * the flag that indicates whether the alert should be auto resolved or not. The default is true.
     * 
     */
    @Export(name="autoMitigate", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> autoMitigate;

    /**
     * @return the flag that indicates whether the alert should be auto resolved or not. The default is true.
     * 
     */
    public Output<Optional<Boolean>> autoMitigate() {
        return Codegen.optional(this.autoMitigate);
    }
    /**
     * defines the specific alert criteria information.
     * 
     */
    @Export(name="criteria", type=Object.class, parameters={})
    private Output<Object> criteria;

    /**
     * @return defines the specific alert criteria information.
     * 
     */
    public Output<Object> criteria() {
        return this.criteria;
    }
    /**
     * the description of the metric alert that will be included in the alert email.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return the description of the metric alert that will be included in the alert email.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * the flag that indicates whether the metric alert is enabled.
     * 
     */
    @Export(name="enabled", type=Boolean.class, parameters={})
    private Output<Boolean> enabled;

    /**
     * @return the flag that indicates whether the metric alert is enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * how often the metric alert is evaluated represented in ISO 8601 duration format.
     * 
     */
    @Export(name="evaluationFrequency", type=String.class, parameters={})
    private Output<String> evaluationFrequency;

    /**
     * @return how often the metric alert is evaluated represented in ISO 8601 duration format.
     * 
     */
    public Output<String> evaluationFrequency() {
        return this.evaluationFrequency;
    }
    /**
     * the value indicating whether this alert rule is migrated.
     * 
     */
    @Export(name="isMigrated", type=Boolean.class, parameters={})
    private Output<Boolean> isMigrated;

    /**
     * @return the value indicating whether this alert rule is migrated.
     * 
     */
    public Output<Boolean> isMigrated() {
        return this.isMigrated;
    }
    /**
     * Last time the rule was updated in ISO8601 format.
     * 
     */
    @Export(name="lastUpdatedTime", type=String.class, parameters={})
    private Output<String> lastUpdatedTime;

    /**
     * @return Last time the rule was updated in ISO8601 format.
     * 
     */
    public Output<String> lastUpdatedTime() {
        return this.lastUpdatedTime;
    }
    /**
     * Resource location
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Resource location
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Azure resource name
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Azure resource name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * the list of resource id&#39;s that this metric alert is scoped to.
     * 
     */
    @Export(name="scopes", type=List.class, parameters={String.class})
    private Output<List<String>> scopes;

    /**
     * @return the list of resource id&#39;s that this metric alert is scoped to.
     * 
     */
    public Output<List<String>> scopes() {
        return this.scopes;
    }
    /**
     * Alert severity {0, 1, 2, 3, 4}
     * 
     */
    @Export(name="severity", type=Integer.class, parameters={})
    private Output<Integer> severity;

    /**
     * @return Alert severity {0, 1, 2, 3, 4}
     * 
     */
    public Output<Integer> severity() {
        return this.severity;
    }
    /**
     * Resource tags
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * the region of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource.
     * 
     */
    @Export(name="targetResourceRegion", type=String.class, parameters={})
    private Output</* @Nullable */ String> targetResourceRegion;

    /**
     * @return the region of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource.
     * 
     */
    public Output<Optional<String>> targetResourceRegion() {
        return Codegen.optional(this.targetResourceRegion);
    }
    /**
     * the resource type of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource.
     * 
     */
    @Export(name="targetResourceType", type=String.class, parameters={})
    private Output</* @Nullable */ String> targetResourceType;

    /**
     * @return the resource type of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource.
     * 
     */
    public Output<Optional<String>> targetResourceType() {
        return Codegen.optional(this.targetResourceType);
    }
    /**
     * Azure resource type
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Azure resource type
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
     * 
     */
    @Export(name="windowSize", type=String.class, parameters={})
    private Output<String> windowSize;

    /**
     * @return the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
     * 
     */
    public Output<String> windowSize() {
        return this.windowSize;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MetricAlert(String name) {
        this(name, MetricAlertArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MetricAlert(String name, MetricAlertArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MetricAlert(String name, MetricAlertArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:insights:MetricAlert", name, args == null ? MetricAlertArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private MetricAlert(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:insights:MetricAlert", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:insights/v20180301:MetricAlert").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MetricAlert get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MetricAlert(name, id, options);
    }
}
