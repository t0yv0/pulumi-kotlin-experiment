// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LogMetricTriggerResponse {
    /**
     * @return Evaluation of metric on a particular column
     * 
     */
    private @Nullable String metricColumn;
    /**
     * @return Metric Trigger Type - &#39;Consecutive&#39; or &#39;Total&#39;
     * 
     */
    private @Nullable String metricTriggerType;
    /**
     * @return The threshold of the metric trigger.
     * 
     */
    private @Nullable Double threshold;
    /**
     * @return Evaluation operation for Metric -&#39;GreaterThan&#39; or &#39;LessThan&#39; or &#39;Equal&#39;.
     * 
     */
    private @Nullable String thresholdOperator;

    private LogMetricTriggerResponse() {}
    /**
     * @return Evaluation of metric on a particular column
     * 
     */
    public Optional<String> metricColumn() {
        return Optional.ofNullable(this.metricColumn);
    }
    /**
     * @return Metric Trigger Type - &#39;Consecutive&#39; or &#39;Total&#39;
     * 
     */
    public Optional<String> metricTriggerType() {
        return Optional.ofNullable(this.metricTriggerType);
    }
    /**
     * @return The threshold of the metric trigger.
     * 
     */
    public Optional<Double> threshold() {
        return Optional.ofNullable(this.threshold);
    }
    /**
     * @return Evaluation operation for Metric -&#39;GreaterThan&#39; or &#39;LessThan&#39; or &#39;Equal&#39;.
     * 
     */
    public Optional<String> thresholdOperator() {
        return Optional.ofNullable(this.thresholdOperator);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogMetricTriggerResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String metricColumn;
        private @Nullable String metricTriggerType;
        private @Nullable Double threshold;
        private @Nullable String thresholdOperator;
        public Builder() {}
        public Builder(LogMetricTriggerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.metricColumn = defaults.metricColumn;
    	      this.metricTriggerType = defaults.metricTriggerType;
    	      this.threshold = defaults.threshold;
    	      this.thresholdOperator = defaults.thresholdOperator;
        }

        @CustomType.Setter
        public Builder metricColumn(@Nullable String metricColumn) {
            this.metricColumn = metricColumn;
            return this;
        }
        @CustomType.Setter
        public Builder metricTriggerType(@Nullable String metricTriggerType) {
            this.metricTriggerType = metricTriggerType;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(@Nullable Double threshold) {
            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder thresholdOperator(@Nullable String thresholdOperator) {
            this.thresholdOperator = thresholdOperator;
            return this;
        }
        public LogMetricTriggerResponse build() {
            final var o = new LogMetricTriggerResponse();
            o.metricColumn = metricColumn;
            o.metricTriggerType = metricTriggerType;
            o.threshold = threshold;
            o.thresholdOperator = thresholdOperator;
            return o;
        }
    }
}
