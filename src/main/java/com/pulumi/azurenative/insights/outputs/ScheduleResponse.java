// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class ScheduleResponse {
    /**
     * @return frequency (in minutes) at which rule condition should be evaluated.
     * 
     */
    private Integer frequencyInMinutes;
    /**
     * @return Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
     * 
     */
    private Integer timeWindowInMinutes;

    private ScheduleResponse() {}
    /**
     * @return frequency (in minutes) at which rule condition should be evaluated.
     * 
     */
    public Integer frequencyInMinutes() {
        return this.frequencyInMinutes;
    }
    /**
     * @return Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
     * 
     */
    public Integer timeWindowInMinutes() {
        return this.timeWindowInMinutes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScheduleResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer frequencyInMinutes;
        private Integer timeWindowInMinutes;
        public Builder() {}
        public Builder(ScheduleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.frequencyInMinutes = defaults.frequencyInMinutes;
    	      this.timeWindowInMinutes = defaults.timeWindowInMinutes;
        }

        @CustomType.Setter
        public Builder frequencyInMinutes(Integer frequencyInMinutes) {
            this.frequencyInMinutes = Objects.requireNonNull(frequencyInMinutes);
            return this;
        }
        @CustomType.Setter
        public Builder timeWindowInMinutes(Integer timeWindowInMinutes) {
            this.timeWindowInMinutes = Objects.requireNonNull(timeWindowInMinutes);
            return this;
        }
        public ScheduleResponse build() {
            final var o = new ScheduleResponse();
            o.frequencyInMinutes = frequencyInMinutes;
            o.timeWindowInMinutes = timeWindowInMinutes;
            return o;
        }
    }
}
