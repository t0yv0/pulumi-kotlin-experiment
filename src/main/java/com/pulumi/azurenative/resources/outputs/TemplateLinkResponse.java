// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.resources.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TemplateLinkResponse {
    /**
     * @return If included, must match the ContentVersion in the template.
     * 
     */
    private @Nullable String contentVersion;
    /**
     * @return The resource id of a Template Spec. Use either the id or uri property, but not both.
     * 
     */
    private @Nullable String id;
    /**
     * @return The query string (for example, a SAS token) to be used with the templateLink URI.
     * 
     */
    private @Nullable String queryString;
    /**
     * @return The relativePath property can be used to deploy a linked template at a location relative to the parent. If the parent template was linked with a TemplateSpec, this will reference an artifact in the TemplateSpec.  If the parent was linked with a URI, the child deployment will be a combination of the parent and relativePath URIs
     * 
     */
    private @Nullable String relativePath;
    /**
     * @return The URI of the template to deploy. Use either the uri or id property, but not both.
     * 
     */
    private @Nullable String uri;

    private TemplateLinkResponse() {}
    /**
     * @return If included, must match the ContentVersion in the template.
     * 
     */
    public Optional<String> contentVersion() {
        return Optional.ofNullable(this.contentVersion);
    }
    /**
     * @return The resource id of a Template Spec. Use either the id or uri property, but not both.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The query string (for example, a SAS token) to be used with the templateLink URI.
     * 
     */
    public Optional<String> queryString() {
        return Optional.ofNullable(this.queryString);
    }
    /**
     * @return The relativePath property can be used to deploy a linked template at a location relative to the parent. If the parent template was linked with a TemplateSpec, this will reference an artifact in the TemplateSpec.  If the parent was linked with a URI, the child deployment will be a combination of the parent and relativePath URIs
     * 
     */
    public Optional<String> relativePath() {
        return Optional.ofNullable(this.relativePath);
    }
    /**
     * @return The URI of the template to deploy. Use either the uri or id property, but not both.
     * 
     */
    public Optional<String> uri() {
        return Optional.ofNullable(this.uri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TemplateLinkResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String contentVersion;
        private @Nullable String id;
        private @Nullable String queryString;
        private @Nullable String relativePath;
        private @Nullable String uri;
        public Builder() {}
        public Builder(TemplateLinkResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentVersion = defaults.contentVersion;
    	      this.id = defaults.id;
    	      this.queryString = defaults.queryString;
    	      this.relativePath = defaults.relativePath;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder contentVersion(@Nullable String contentVersion) {
            this.contentVersion = contentVersion;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder queryString(@Nullable String queryString) {
            this.queryString = queryString;
            return this;
        }
        @CustomType.Setter
        public Builder relativePath(@Nullable String relativePath) {
            this.relativePath = relativePath;
            return this;
        }
        @CustomType.Setter
        public Builder uri(@Nullable String uri) {
            this.uri = uri;
            return this;
        }
        public TemplateLinkResponse build() {
            final var o = new TemplateLinkResponse();
            o.contentVersion = contentVersion;
            o.id = id;
            o.queryString = queryString;
            o.relativePath = relativePath;
            o.uri = uri;
            return o;
        }
    }
}
