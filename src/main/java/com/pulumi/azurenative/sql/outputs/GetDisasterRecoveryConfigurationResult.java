// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDisasterRecoveryConfigurationResult {
    /**
     * @return Whether or not failover can be done automatically.
     * 
     */
    private String autoFailover;
    /**
     * @return How aggressive the automatic failover should be.
     * 
     */
    private String failoverPolicy;
    /**
     * @return Resource ID.
     * 
     */
    private String id;
    /**
     * @return Location of the server that contains this disaster recovery configuration.
     * 
     */
    private String location;
    /**
     * @return Logical name of the server.
     * 
     */
    private String logicalServerName;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return Logical name of the partner server.
     * 
     */
    private String partnerLogicalServerName;
    /**
     * @return Id of the partner server.
     * 
     */
    private String partnerServerId;
    /**
     * @return The role of the current server in the disaster recovery configuration.
     * 
     */
    private String role;
    /**
     * @return The status of the disaster recovery configuration.
     * 
     */
    private String status;
    /**
     * @return Resource type.
     * 
     */
    private String type;

    private GetDisasterRecoveryConfigurationResult() {}
    /**
     * @return Whether or not failover can be done automatically.
     * 
     */
    public String autoFailover() {
        return this.autoFailover;
    }
    /**
     * @return How aggressive the automatic failover should be.
     * 
     */
    public String failoverPolicy() {
        return this.failoverPolicy;
    }
    /**
     * @return Resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Location of the server that contains this disaster recovery configuration.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Logical name of the server.
     * 
     */
    public String logicalServerName() {
        return this.logicalServerName;
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Logical name of the partner server.
     * 
     */
    public String partnerLogicalServerName() {
        return this.partnerLogicalServerName;
    }
    /**
     * @return Id of the partner server.
     * 
     */
    public String partnerServerId() {
        return this.partnerServerId;
    }
    /**
     * @return The role of the current server in the disaster recovery configuration.
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return The status of the disaster recovery configuration.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDisasterRecoveryConfigurationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String autoFailover;
        private String failoverPolicy;
        private String id;
        private String location;
        private String logicalServerName;
        private String name;
        private String partnerLogicalServerName;
        private String partnerServerId;
        private String role;
        private String status;
        private String type;
        public Builder() {}
        public Builder(GetDisasterRecoveryConfigurationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoFailover = defaults.autoFailover;
    	      this.failoverPolicy = defaults.failoverPolicy;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.logicalServerName = defaults.logicalServerName;
    	      this.name = defaults.name;
    	      this.partnerLogicalServerName = defaults.partnerLogicalServerName;
    	      this.partnerServerId = defaults.partnerServerId;
    	      this.role = defaults.role;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder autoFailover(String autoFailover) {
            this.autoFailover = Objects.requireNonNull(autoFailover);
            return this;
        }
        @CustomType.Setter
        public Builder failoverPolicy(String failoverPolicy) {
            this.failoverPolicy = Objects.requireNonNull(failoverPolicy);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder logicalServerName(String logicalServerName) {
            this.logicalServerName = Objects.requireNonNull(logicalServerName);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder partnerLogicalServerName(String partnerLogicalServerName) {
            this.partnerLogicalServerName = Objects.requireNonNull(partnerLogicalServerName);
            return this;
        }
        @CustomType.Setter
        public Builder partnerServerId(String partnerServerId) {
            this.partnerServerId = Objects.requireNonNull(partnerServerId);
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetDisasterRecoveryConfigurationResult build() {
            final var o = new GetDisasterRecoveryConfigurationResult();
            o.autoFailover = autoFailover;
            o.failoverPolicy = failoverPolicy;
            o.id = id;
            o.location = location;
            o.logicalServerName = logicalServerName;
            o.name = name;
            o.partnerLogicalServerName = partnerLogicalServerName;
            o.partnerServerId = partnerServerId;
            o.role = role;
            o.status = status;
            o.type = type;
            return o;
        }
    }
}
