// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDistributedAvailabilityGroupResult {
    /**
     * @return The distributed availability group id
     * 
     */
    private String distributedAvailabilityGroupId;
    /**
     * @return Resource ID.
     * 
     */
    private String id;
    /**
     * @return The last hardened lsn
     * 
     */
    private String lastHardenedLsn;
    /**
     * @return The link state
     * 
     */
    private String linkState;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return The primary availability group name
     * 
     */
    private @Nullable String primaryAvailabilityGroupName;
    /**
     * @return The replication mode of a distributed availability group. Parameter will be ignored during link creation.
     * 
     */
    private @Nullable String replicationMode;
    /**
     * @return The secondary availability group name
     * 
     */
    private @Nullable String secondaryAvailabilityGroupName;
    /**
     * @return The source endpoint
     * 
     */
    private @Nullable String sourceEndpoint;
    /**
     * @return The source replica id
     * 
     */
    private String sourceReplicaId;
    /**
     * @return The name of the target database
     * 
     */
    private @Nullable String targetDatabase;
    /**
     * @return The target replica id
     * 
     */
    private String targetReplicaId;
    /**
     * @return Resource type.
     * 
     */
    private String type;

    private GetDistributedAvailabilityGroupResult() {}
    /**
     * @return The distributed availability group id
     * 
     */
    public String distributedAvailabilityGroupId() {
        return this.distributedAvailabilityGroupId;
    }
    /**
     * @return Resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The last hardened lsn
     * 
     */
    public String lastHardenedLsn() {
        return this.lastHardenedLsn;
    }
    /**
     * @return The link state
     * 
     */
    public String linkState() {
        return this.linkState;
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The primary availability group name
     * 
     */
    public Optional<String> primaryAvailabilityGroupName() {
        return Optional.ofNullable(this.primaryAvailabilityGroupName);
    }
    /**
     * @return The replication mode of a distributed availability group. Parameter will be ignored during link creation.
     * 
     */
    public Optional<String> replicationMode() {
        return Optional.ofNullable(this.replicationMode);
    }
    /**
     * @return The secondary availability group name
     * 
     */
    public Optional<String> secondaryAvailabilityGroupName() {
        return Optional.ofNullable(this.secondaryAvailabilityGroupName);
    }
    /**
     * @return The source endpoint
     * 
     */
    public Optional<String> sourceEndpoint() {
        return Optional.ofNullable(this.sourceEndpoint);
    }
    /**
     * @return The source replica id
     * 
     */
    public String sourceReplicaId() {
        return this.sourceReplicaId;
    }
    /**
     * @return The name of the target database
     * 
     */
    public Optional<String> targetDatabase() {
        return Optional.ofNullable(this.targetDatabase);
    }
    /**
     * @return The target replica id
     * 
     */
    public String targetReplicaId() {
        return this.targetReplicaId;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDistributedAvailabilityGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String distributedAvailabilityGroupId;
        private String id;
        private String lastHardenedLsn;
        private String linkState;
        private String name;
        private @Nullable String primaryAvailabilityGroupName;
        private @Nullable String replicationMode;
        private @Nullable String secondaryAvailabilityGroupName;
        private @Nullable String sourceEndpoint;
        private String sourceReplicaId;
        private @Nullable String targetDatabase;
        private String targetReplicaId;
        private String type;
        public Builder() {}
        public Builder(GetDistributedAvailabilityGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.distributedAvailabilityGroupId = defaults.distributedAvailabilityGroupId;
    	      this.id = defaults.id;
    	      this.lastHardenedLsn = defaults.lastHardenedLsn;
    	      this.linkState = defaults.linkState;
    	      this.name = defaults.name;
    	      this.primaryAvailabilityGroupName = defaults.primaryAvailabilityGroupName;
    	      this.replicationMode = defaults.replicationMode;
    	      this.secondaryAvailabilityGroupName = defaults.secondaryAvailabilityGroupName;
    	      this.sourceEndpoint = defaults.sourceEndpoint;
    	      this.sourceReplicaId = defaults.sourceReplicaId;
    	      this.targetDatabase = defaults.targetDatabase;
    	      this.targetReplicaId = defaults.targetReplicaId;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder distributedAvailabilityGroupId(String distributedAvailabilityGroupId) {
            this.distributedAvailabilityGroupId = Objects.requireNonNull(distributedAvailabilityGroupId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder lastHardenedLsn(String lastHardenedLsn) {
            this.lastHardenedLsn = Objects.requireNonNull(lastHardenedLsn);
            return this;
        }
        @CustomType.Setter
        public Builder linkState(String linkState) {
            this.linkState = Objects.requireNonNull(linkState);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder primaryAvailabilityGroupName(@Nullable String primaryAvailabilityGroupName) {
            this.primaryAvailabilityGroupName = primaryAvailabilityGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder replicationMode(@Nullable String replicationMode) {
            this.replicationMode = replicationMode;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryAvailabilityGroupName(@Nullable String secondaryAvailabilityGroupName) {
            this.secondaryAvailabilityGroupName = secondaryAvailabilityGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder sourceEndpoint(@Nullable String sourceEndpoint) {
            this.sourceEndpoint = sourceEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder sourceReplicaId(String sourceReplicaId) {
            this.sourceReplicaId = Objects.requireNonNull(sourceReplicaId);
            return this;
        }
        @CustomType.Setter
        public Builder targetDatabase(@Nullable String targetDatabase) {
            this.targetDatabase = targetDatabase;
            return this;
        }
        @CustomType.Setter
        public Builder targetReplicaId(String targetReplicaId) {
            this.targetReplicaId = Objects.requireNonNull(targetReplicaId);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetDistributedAvailabilityGroupResult build() {
            final var o = new GetDistributedAvailabilityGroupResult();
            o.distributedAvailabilityGroupId = distributedAvailabilityGroupId;
            o.id = id;
            o.lastHardenedLsn = lastHardenedLsn;
            o.linkState = linkState;
            o.name = name;
            o.primaryAvailabilityGroupName = primaryAvailabilityGroupName;
            o.replicationMode = replicationMode;
            o.secondaryAvailabilityGroupName = secondaryAvailabilityGroupName;
            o.sourceEndpoint = sourceEndpoint;
            o.sourceReplicaId = sourceReplicaId;
            o.targetDatabase = targetDatabase;
            o.targetReplicaId = targetReplicaId;
            o.type = type;
            return o;
        }
    }
}
