// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSyncMemberResult {
    /**
     * @return Database name of the member database in the sync member.
     * 
     */
    private @Nullable String databaseName;
    /**
     * @return Database type of the sync member.
     * 
     */
    private @Nullable String databaseType;
    /**
     * @return Resource ID.
     * 
     */
    private String id;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return Private endpoint name of the sync member if use private link connection is enabled, for sync members in Azure.
     * 
     */
    private String privateEndpointName;
    /**
     * @return Server name of the member database in the sync member
     * 
     */
    private @Nullable String serverName;
    /**
     * @return SQL Server database id of the sync member.
     * 
     */
    private @Nullable String sqlServerDatabaseId;
    /**
     * @return ARM resource id of the sync agent in the sync member.
     * 
     */
    private @Nullable String syncAgentId;
    /**
     * @return Sync direction of the sync member.
     * 
     */
    private @Nullable String syncDirection;
    /**
     * @return ARM resource id of the sync member logical database, for sync members in Azure.
     * 
     */
    private @Nullable String syncMemberAzureDatabaseResourceId;
    /**
     * @return Sync state of the sync member.
     * 
     */
    private String syncState;
    /**
     * @return Resource type.
     * 
     */
    private String type;
    /**
     * @return Whether to use private link connection.
     * 
     */
    private @Nullable Boolean usePrivateLinkConnection;
    /**
     * @return User name of the member database in the sync member.
     * 
     */
    private @Nullable String userName;

    private GetSyncMemberResult() {}
    /**
     * @return Database name of the member database in the sync member.
     * 
     */
    public Optional<String> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }
    /**
     * @return Database type of the sync member.
     * 
     */
    public Optional<String> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }
    /**
     * @return Resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Private endpoint name of the sync member if use private link connection is enabled, for sync members in Azure.
     * 
     */
    public String privateEndpointName() {
        return this.privateEndpointName;
    }
    /**
     * @return Server name of the member database in the sync member
     * 
     */
    public Optional<String> serverName() {
        return Optional.ofNullable(this.serverName);
    }
    /**
     * @return SQL Server database id of the sync member.
     * 
     */
    public Optional<String> sqlServerDatabaseId() {
        return Optional.ofNullable(this.sqlServerDatabaseId);
    }
    /**
     * @return ARM resource id of the sync agent in the sync member.
     * 
     */
    public Optional<String> syncAgentId() {
        return Optional.ofNullable(this.syncAgentId);
    }
    /**
     * @return Sync direction of the sync member.
     * 
     */
    public Optional<String> syncDirection() {
        return Optional.ofNullable(this.syncDirection);
    }
    /**
     * @return ARM resource id of the sync member logical database, for sync members in Azure.
     * 
     */
    public Optional<String> syncMemberAzureDatabaseResourceId() {
        return Optional.ofNullable(this.syncMemberAzureDatabaseResourceId);
    }
    /**
     * @return Sync state of the sync member.
     * 
     */
    public String syncState() {
        return this.syncState;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Whether to use private link connection.
     * 
     */
    public Optional<Boolean> usePrivateLinkConnection() {
        return Optional.ofNullable(this.usePrivateLinkConnection);
    }
    /**
     * @return User name of the member database in the sync member.
     * 
     */
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSyncMemberResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String databaseName;
        private @Nullable String databaseType;
        private String id;
        private String name;
        private String privateEndpointName;
        private @Nullable String serverName;
        private @Nullable String sqlServerDatabaseId;
        private @Nullable String syncAgentId;
        private @Nullable String syncDirection;
        private @Nullable String syncMemberAzureDatabaseResourceId;
        private String syncState;
        private String type;
        private @Nullable Boolean usePrivateLinkConnection;
        private @Nullable String userName;
        public Builder() {}
        public Builder(GetSyncMemberResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseName = defaults.databaseName;
    	      this.databaseType = defaults.databaseType;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.privateEndpointName = defaults.privateEndpointName;
    	      this.serverName = defaults.serverName;
    	      this.sqlServerDatabaseId = defaults.sqlServerDatabaseId;
    	      this.syncAgentId = defaults.syncAgentId;
    	      this.syncDirection = defaults.syncDirection;
    	      this.syncMemberAzureDatabaseResourceId = defaults.syncMemberAzureDatabaseResourceId;
    	      this.syncState = defaults.syncState;
    	      this.type = defaults.type;
    	      this.usePrivateLinkConnection = defaults.usePrivateLinkConnection;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder databaseName(@Nullable String databaseName) {
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder databaseType(@Nullable String databaseType) {
            this.databaseType = databaseType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder privateEndpointName(String privateEndpointName) {
            this.privateEndpointName = Objects.requireNonNull(privateEndpointName);
            return this;
        }
        @CustomType.Setter
        public Builder serverName(@Nullable String serverName) {
            this.serverName = serverName;
            return this;
        }
        @CustomType.Setter
        public Builder sqlServerDatabaseId(@Nullable String sqlServerDatabaseId) {
            this.sqlServerDatabaseId = sqlServerDatabaseId;
            return this;
        }
        @CustomType.Setter
        public Builder syncAgentId(@Nullable String syncAgentId) {
            this.syncAgentId = syncAgentId;
            return this;
        }
        @CustomType.Setter
        public Builder syncDirection(@Nullable String syncDirection) {
            this.syncDirection = syncDirection;
            return this;
        }
        @CustomType.Setter
        public Builder syncMemberAzureDatabaseResourceId(@Nullable String syncMemberAzureDatabaseResourceId) {
            this.syncMemberAzureDatabaseResourceId = syncMemberAzureDatabaseResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder syncState(String syncState) {
            this.syncState = Objects.requireNonNull(syncState);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder usePrivateLinkConnection(@Nullable Boolean usePrivateLinkConnection) {
            this.usePrivateLinkConnection = usePrivateLinkConnection;
            return this;
        }
        @CustomType.Setter
        public Builder userName(@Nullable String userName) {
            this.userName = userName;
            return this;
        }
        public GetSyncMemberResult build() {
            final var o = new GetSyncMemberResult();
            o.databaseName = databaseName;
            o.databaseType = databaseType;
            o.id = id;
            o.name = name;
            o.privateEndpointName = privateEndpointName;
            o.serverName = serverName;
            o.sqlServerDatabaseId = sqlServerDatabaseId;
            o.syncAgentId = syncAgentId;
            o.syncDirection = syncDirection;
            o.syncMemberAzureDatabaseResourceId = syncMemberAzureDatabaseResourceId;
            o.syncState = syncState;
            o.type = type;
            o.usePrivateLinkConnection = usePrivateLinkConnection;
            o.userName = userName;
            return o;
        }
    }
}
