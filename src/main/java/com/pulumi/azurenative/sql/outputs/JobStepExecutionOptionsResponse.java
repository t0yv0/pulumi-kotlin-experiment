// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class JobStepExecutionOptionsResponse {
    /**
     * @return Initial delay between retries for job step execution.
     * 
     */
    private @Nullable Integer initialRetryIntervalSeconds;
    /**
     * @return The maximum amount of time to wait between retries for job step execution.
     * 
     */
    private @Nullable Integer maximumRetryIntervalSeconds;
    /**
     * @return Maximum number of times the job step will be reattempted if the first attempt fails.
     * 
     */
    private @Nullable Integer retryAttempts;
    /**
     * @return The backoff multiplier for the time between retries.
     * 
     */
    private @Nullable Double retryIntervalBackoffMultiplier;
    /**
     * @return Execution timeout for the job step.
     * 
     */
    private @Nullable Integer timeoutSeconds;

    private JobStepExecutionOptionsResponse() {}
    /**
     * @return Initial delay between retries for job step execution.
     * 
     */
    public Optional<Integer> initialRetryIntervalSeconds() {
        return Optional.ofNullable(this.initialRetryIntervalSeconds);
    }
    /**
     * @return The maximum amount of time to wait between retries for job step execution.
     * 
     */
    public Optional<Integer> maximumRetryIntervalSeconds() {
        return Optional.ofNullable(this.maximumRetryIntervalSeconds);
    }
    /**
     * @return Maximum number of times the job step will be reattempted if the first attempt fails.
     * 
     */
    public Optional<Integer> retryAttempts() {
        return Optional.ofNullable(this.retryAttempts);
    }
    /**
     * @return The backoff multiplier for the time between retries.
     * 
     */
    public Optional<Double> retryIntervalBackoffMultiplier() {
        return Optional.ofNullable(this.retryIntervalBackoffMultiplier);
    }
    /**
     * @return Execution timeout for the job step.
     * 
     */
    public Optional<Integer> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobStepExecutionOptionsResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer initialRetryIntervalSeconds;
        private @Nullable Integer maximumRetryIntervalSeconds;
        private @Nullable Integer retryAttempts;
        private @Nullable Double retryIntervalBackoffMultiplier;
        private @Nullable Integer timeoutSeconds;
        public Builder() {}
        public Builder(JobStepExecutionOptionsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.initialRetryIntervalSeconds = defaults.initialRetryIntervalSeconds;
    	      this.maximumRetryIntervalSeconds = defaults.maximumRetryIntervalSeconds;
    	      this.retryAttempts = defaults.retryAttempts;
    	      this.retryIntervalBackoffMultiplier = defaults.retryIntervalBackoffMultiplier;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
        }

        @CustomType.Setter
        public Builder initialRetryIntervalSeconds(@Nullable Integer initialRetryIntervalSeconds) {
            this.initialRetryIntervalSeconds = initialRetryIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder maximumRetryIntervalSeconds(@Nullable Integer maximumRetryIntervalSeconds) {
            this.maximumRetryIntervalSeconds = maximumRetryIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder retryAttempts(@Nullable Integer retryAttempts) {
            this.retryAttempts = retryAttempts;
            return this;
        }
        @CustomType.Setter
        public Builder retryIntervalBackoffMultiplier(@Nullable Double retryIntervalBackoffMultiplier) {
            this.retryIntervalBackoffMultiplier = retryIntervalBackoffMultiplier;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutSeconds(@Nullable Integer timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }
        public JobStepExecutionOptionsResponse build() {
            final var o = new JobStepExecutionOptionsResponse();
            o.initialRetryIntervalSeconds = initialRetryIntervalSeconds;
            o.maximumRetryIntervalSeconds = maximumRetryIntervalSeconds;
            o.retryAttempts = retryAttempts;
            o.retryIntervalBackoffMultiplier = retryIntervalBackoffMultiplier;
            o.timeoutSeconds = timeoutSeconds;
            return o;
        }
    }
}
