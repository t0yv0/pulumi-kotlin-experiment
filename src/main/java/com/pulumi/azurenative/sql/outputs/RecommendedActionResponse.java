// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql.outputs;

import com.pulumi.azurenative.sql.outputs.RecommendedActionErrorInfoResponse;
import com.pulumi.azurenative.sql.outputs.RecommendedActionImpactRecordResponse;
import com.pulumi.azurenative.sql.outputs.RecommendedActionImplementationInfoResponse;
import com.pulumi.azurenative.sql.outputs.RecommendedActionMetricInfoResponse;
import com.pulumi.azurenative.sql.outputs.RecommendedActionStateInfoResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class RecommendedActionResponse {
    /**
     * @return Gets additional details specific to this recommended action.
     * 
     */
    private Map<String,Object> details;
    /**
     * @return Gets the error details if and why this recommended action is put to error state.
     * 
     */
    private RecommendedActionErrorInfoResponse errorDetails;
    /**
     * @return Gets the estimated impact info for this recommended action e.g., Estimated CPU gain, Estimated Disk Space change
     * 
     */
    private List<RecommendedActionImpactRecordResponse> estimatedImpact;
    /**
     * @return Gets the time taken for applying this recommended action on user resource. e.g., time taken for index creation
     * 
     */
    private String executeActionDuration;
    /**
     * @return Gets if approval for applying this recommended action was given by user/system.
     * 
     */
    private String executeActionInitiatedBy;
    /**
     * @return Gets the time when this recommended action was approved for execution.
     * 
     */
    private String executeActionInitiatedTime;
    /**
     * @return Gets the time when system started applying this recommended action on the user resource. e.g., index creation start time
     * 
     */
    private String executeActionStartTime;
    /**
     * @return Resource ID.
     * 
     */
    private String id;
    /**
     * @return Gets the implementation details of this recommended action for user to apply it manually.
     * 
     */
    private RecommendedActionImplementationInfoResponse implementationDetails;
    /**
     * @return Gets if this recommended action was suggested some time ago but user chose to ignore this and system added a new recommended action again.
     * 
     */
    private Boolean isArchivedAction;
    /**
     * @return Gets if this recommended action is actionable by user
     * 
     */
    private Boolean isExecutableAction;
    /**
     * @return Gets if changes applied by this recommended action can be reverted by user
     * 
     */
    private Boolean isRevertableAction;
    /**
     * @return Resource kind.
     * 
     */
    private String kind;
    /**
     * @return Gets time when this recommended action was last refreshed.
     * 
     */
    private String lastRefresh;
    /**
     * @return Gets the linked objects, if any.
     * 
     */
    private List<String> linkedObjects;
    /**
     * @return Resource location.
     * 
     */
    private String location;
    /**
     * @return Resource name.
     * 
     */
    private String name;
    /**
     * @return Gets the observed/actual impact info for this recommended action e.g., Actual CPU gain, Actual Disk Space change
     * 
     */
    private List<RecommendedActionImpactRecordResponse> observedImpact;
    /**
     * @return Gets the reason for recommending this action. e.g., DuplicateIndex
     * 
     */
    private String recommendationReason;
    /**
     * @return Gets the time taken for reverting changes of this recommended action on user resource. e.g., time taken for dropping the created index.
     * 
     */
    private String revertActionDuration;
    /**
     * @return Gets if approval for reverting this recommended action was given by user/system.
     * 
     */
    private String revertActionInitiatedBy;
    /**
     * @return Gets the time when this recommended action was approved for revert.
     * 
     */
    private String revertActionInitiatedTime;
    /**
     * @return Gets the time when system started reverting changes of this recommended action on user resource. e.g., time when index drop is executed.
     * 
     */
    private String revertActionStartTime;
    /**
     * @return Gets the impact of this recommended action. Possible values are 1 - Low impact, 2 - Medium Impact and 3 - High Impact
     * 
     */
    private Integer score;
    /**
     * @return Gets the info of the current state the recommended action is in.
     * 
     */
    private RecommendedActionStateInfoResponse state;
    /**
     * @return Gets the time series info of metrics for this recommended action e.g., CPU consumption time series
     * 
     */
    private List<RecommendedActionMetricInfoResponse> timeSeries;
    /**
     * @return Resource type.
     * 
     */
    private String type;
    /**
     * @return Gets the time since when this recommended action is valid.
     * 
     */
    private String validSince;

    private RecommendedActionResponse() {}
    /**
     * @return Gets additional details specific to this recommended action.
     * 
     */
    public Map<String,Object> details() {
        return this.details;
    }
    /**
     * @return Gets the error details if and why this recommended action is put to error state.
     * 
     */
    public RecommendedActionErrorInfoResponse errorDetails() {
        return this.errorDetails;
    }
    /**
     * @return Gets the estimated impact info for this recommended action e.g., Estimated CPU gain, Estimated Disk Space change
     * 
     */
    public List<RecommendedActionImpactRecordResponse> estimatedImpact() {
        return this.estimatedImpact;
    }
    /**
     * @return Gets the time taken for applying this recommended action on user resource. e.g., time taken for index creation
     * 
     */
    public String executeActionDuration() {
        return this.executeActionDuration;
    }
    /**
     * @return Gets if approval for applying this recommended action was given by user/system.
     * 
     */
    public String executeActionInitiatedBy() {
        return this.executeActionInitiatedBy;
    }
    /**
     * @return Gets the time when this recommended action was approved for execution.
     * 
     */
    public String executeActionInitiatedTime() {
        return this.executeActionInitiatedTime;
    }
    /**
     * @return Gets the time when system started applying this recommended action on the user resource. e.g., index creation start time
     * 
     */
    public String executeActionStartTime() {
        return this.executeActionStartTime;
    }
    /**
     * @return Resource ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Gets the implementation details of this recommended action for user to apply it manually.
     * 
     */
    public RecommendedActionImplementationInfoResponse implementationDetails() {
        return this.implementationDetails;
    }
    /**
     * @return Gets if this recommended action was suggested some time ago but user chose to ignore this and system added a new recommended action again.
     * 
     */
    public Boolean isArchivedAction() {
        return this.isArchivedAction;
    }
    /**
     * @return Gets if this recommended action is actionable by user
     * 
     */
    public Boolean isExecutableAction() {
        return this.isExecutableAction;
    }
    /**
     * @return Gets if changes applied by this recommended action can be reverted by user
     * 
     */
    public Boolean isRevertableAction() {
        return this.isRevertableAction;
    }
    /**
     * @return Resource kind.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return Gets time when this recommended action was last refreshed.
     * 
     */
    public String lastRefresh() {
        return this.lastRefresh;
    }
    /**
     * @return Gets the linked objects, if any.
     * 
     */
    public List<String> linkedObjects() {
        return this.linkedObjects;
    }
    /**
     * @return Resource location.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Gets the observed/actual impact info for this recommended action e.g., Actual CPU gain, Actual Disk Space change
     * 
     */
    public List<RecommendedActionImpactRecordResponse> observedImpact() {
        return this.observedImpact;
    }
    /**
     * @return Gets the reason for recommending this action. e.g., DuplicateIndex
     * 
     */
    public String recommendationReason() {
        return this.recommendationReason;
    }
    /**
     * @return Gets the time taken for reverting changes of this recommended action on user resource. e.g., time taken for dropping the created index.
     * 
     */
    public String revertActionDuration() {
        return this.revertActionDuration;
    }
    /**
     * @return Gets if approval for reverting this recommended action was given by user/system.
     * 
     */
    public String revertActionInitiatedBy() {
        return this.revertActionInitiatedBy;
    }
    /**
     * @return Gets the time when this recommended action was approved for revert.
     * 
     */
    public String revertActionInitiatedTime() {
        return this.revertActionInitiatedTime;
    }
    /**
     * @return Gets the time when system started reverting changes of this recommended action on user resource. e.g., time when index drop is executed.
     * 
     */
    public String revertActionStartTime() {
        return this.revertActionStartTime;
    }
    /**
     * @return Gets the impact of this recommended action. Possible values are 1 - Low impact, 2 - Medium Impact and 3 - High Impact
     * 
     */
    public Integer score() {
        return this.score;
    }
    /**
     * @return Gets the info of the current state the recommended action is in.
     * 
     */
    public RecommendedActionStateInfoResponse state() {
        return this.state;
    }
    /**
     * @return Gets the time series info of metrics for this recommended action e.g., CPU consumption time series
     * 
     */
    public List<RecommendedActionMetricInfoResponse> timeSeries() {
        return this.timeSeries;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Gets the time since when this recommended action is valid.
     * 
     */
    public String validSince() {
        return this.validSince;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecommendedActionResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> details;
        private RecommendedActionErrorInfoResponse errorDetails;
        private List<RecommendedActionImpactRecordResponse> estimatedImpact;
        private String executeActionDuration;
        private String executeActionInitiatedBy;
        private String executeActionInitiatedTime;
        private String executeActionStartTime;
        private String id;
        private RecommendedActionImplementationInfoResponse implementationDetails;
        private Boolean isArchivedAction;
        private Boolean isExecutableAction;
        private Boolean isRevertableAction;
        private String kind;
        private String lastRefresh;
        private List<String> linkedObjects;
        private String location;
        private String name;
        private List<RecommendedActionImpactRecordResponse> observedImpact;
        private String recommendationReason;
        private String revertActionDuration;
        private String revertActionInitiatedBy;
        private String revertActionInitiatedTime;
        private String revertActionStartTime;
        private Integer score;
        private RecommendedActionStateInfoResponse state;
        private List<RecommendedActionMetricInfoResponse> timeSeries;
        private String type;
        private String validSince;
        public Builder() {}
        public Builder(RecommendedActionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.details = defaults.details;
    	      this.errorDetails = defaults.errorDetails;
    	      this.estimatedImpact = defaults.estimatedImpact;
    	      this.executeActionDuration = defaults.executeActionDuration;
    	      this.executeActionInitiatedBy = defaults.executeActionInitiatedBy;
    	      this.executeActionInitiatedTime = defaults.executeActionInitiatedTime;
    	      this.executeActionStartTime = defaults.executeActionStartTime;
    	      this.id = defaults.id;
    	      this.implementationDetails = defaults.implementationDetails;
    	      this.isArchivedAction = defaults.isArchivedAction;
    	      this.isExecutableAction = defaults.isExecutableAction;
    	      this.isRevertableAction = defaults.isRevertableAction;
    	      this.kind = defaults.kind;
    	      this.lastRefresh = defaults.lastRefresh;
    	      this.linkedObjects = defaults.linkedObjects;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.observedImpact = defaults.observedImpact;
    	      this.recommendationReason = defaults.recommendationReason;
    	      this.revertActionDuration = defaults.revertActionDuration;
    	      this.revertActionInitiatedBy = defaults.revertActionInitiatedBy;
    	      this.revertActionInitiatedTime = defaults.revertActionInitiatedTime;
    	      this.revertActionStartTime = defaults.revertActionStartTime;
    	      this.score = defaults.score;
    	      this.state = defaults.state;
    	      this.timeSeries = defaults.timeSeries;
    	      this.type = defaults.type;
    	      this.validSince = defaults.validSince;
        }

        @CustomType.Setter
        public Builder details(Map<String,Object> details) {
            this.details = Objects.requireNonNull(details);
            return this;
        }
        @CustomType.Setter
        public Builder errorDetails(RecommendedActionErrorInfoResponse errorDetails) {
            this.errorDetails = Objects.requireNonNull(errorDetails);
            return this;
        }
        @CustomType.Setter
        public Builder estimatedImpact(List<RecommendedActionImpactRecordResponse> estimatedImpact) {
            this.estimatedImpact = Objects.requireNonNull(estimatedImpact);
            return this;
        }
        public Builder estimatedImpact(RecommendedActionImpactRecordResponse... estimatedImpact) {
            return estimatedImpact(List.of(estimatedImpact));
        }
        @CustomType.Setter
        public Builder executeActionDuration(String executeActionDuration) {
            this.executeActionDuration = Objects.requireNonNull(executeActionDuration);
            return this;
        }
        @CustomType.Setter
        public Builder executeActionInitiatedBy(String executeActionInitiatedBy) {
            this.executeActionInitiatedBy = Objects.requireNonNull(executeActionInitiatedBy);
            return this;
        }
        @CustomType.Setter
        public Builder executeActionInitiatedTime(String executeActionInitiatedTime) {
            this.executeActionInitiatedTime = Objects.requireNonNull(executeActionInitiatedTime);
            return this;
        }
        @CustomType.Setter
        public Builder executeActionStartTime(String executeActionStartTime) {
            this.executeActionStartTime = Objects.requireNonNull(executeActionStartTime);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder implementationDetails(RecommendedActionImplementationInfoResponse implementationDetails) {
            this.implementationDetails = Objects.requireNonNull(implementationDetails);
            return this;
        }
        @CustomType.Setter
        public Builder isArchivedAction(Boolean isArchivedAction) {
            this.isArchivedAction = Objects.requireNonNull(isArchivedAction);
            return this;
        }
        @CustomType.Setter
        public Builder isExecutableAction(Boolean isExecutableAction) {
            this.isExecutableAction = Objects.requireNonNull(isExecutableAction);
            return this;
        }
        @CustomType.Setter
        public Builder isRevertableAction(Boolean isRevertableAction) {
            this.isRevertableAction = Objects.requireNonNull(isRevertableAction);
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        @CustomType.Setter
        public Builder lastRefresh(String lastRefresh) {
            this.lastRefresh = Objects.requireNonNull(lastRefresh);
            return this;
        }
        @CustomType.Setter
        public Builder linkedObjects(List<String> linkedObjects) {
            this.linkedObjects = Objects.requireNonNull(linkedObjects);
            return this;
        }
        public Builder linkedObjects(String... linkedObjects) {
            return linkedObjects(List.of(linkedObjects));
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder observedImpact(List<RecommendedActionImpactRecordResponse> observedImpact) {
            this.observedImpact = Objects.requireNonNull(observedImpact);
            return this;
        }
        public Builder observedImpact(RecommendedActionImpactRecordResponse... observedImpact) {
            return observedImpact(List.of(observedImpact));
        }
        @CustomType.Setter
        public Builder recommendationReason(String recommendationReason) {
            this.recommendationReason = Objects.requireNonNull(recommendationReason);
            return this;
        }
        @CustomType.Setter
        public Builder revertActionDuration(String revertActionDuration) {
            this.revertActionDuration = Objects.requireNonNull(revertActionDuration);
            return this;
        }
        @CustomType.Setter
        public Builder revertActionInitiatedBy(String revertActionInitiatedBy) {
            this.revertActionInitiatedBy = Objects.requireNonNull(revertActionInitiatedBy);
            return this;
        }
        @CustomType.Setter
        public Builder revertActionInitiatedTime(String revertActionInitiatedTime) {
            this.revertActionInitiatedTime = Objects.requireNonNull(revertActionInitiatedTime);
            return this;
        }
        @CustomType.Setter
        public Builder revertActionStartTime(String revertActionStartTime) {
            this.revertActionStartTime = Objects.requireNonNull(revertActionStartTime);
            return this;
        }
        @CustomType.Setter
        public Builder score(Integer score) {
            this.score = Objects.requireNonNull(score);
            return this;
        }
        @CustomType.Setter
        public Builder state(RecommendedActionStateInfoResponse state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder timeSeries(List<RecommendedActionMetricInfoResponse> timeSeries) {
            this.timeSeries = Objects.requireNonNull(timeSeries);
            return this;
        }
        public Builder timeSeries(RecommendedActionMetricInfoResponse... timeSeries) {
            return timeSeries(List.of(timeSeries));
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder validSince(String validSince) {
            this.validSince = Objects.requireNonNull(validSince);
            return this;
        }
        public RecommendedActionResponse build() {
            final var o = new RecommendedActionResponse();
            o.details = details;
            o.errorDetails = errorDetails;
            o.estimatedImpact = estimatedImpact;
            o.executeActionDuration = executeActionDuration;
            o.executeActionInitiatedBy = executeActionInitiatedBy;
            o.executeActionInitiatedTime = executeActionInitiatedTime;
            o.executeActionStartTime = executeActionStartTime;
            o.id = id;
            o.implementationDetails = implementationDetails;
            o.isArchivedAction = isArchivedAction;
            o.isExecutableAction = isExecutableAction;
            o.isRevertableAction = isRevertableAction;
            o.kind = kind;
            o.lastRefresh = lastRefresh;
            o.linkedObjects = linkedObjects;
            o.location = location;
            o.name = name;
            o.observedImpact = observedImpact;
            o.recommendationReason = recommendationReason;
            o.revertActionDuration = revertActionDuration;
            o.revertActionInitiatedBy = revertActionInitiatedBy;
            o.revertActionInitiatedTime = revertActionInitiatedTime;
            o.revertActionStartTime = revertActionStartTime;
            o.score = score;
            o.state = state;
            o.timeSeries = timeSeries;
            o.type = type;
            o.validSince = validSince;
            return o;
        }
    }
}
