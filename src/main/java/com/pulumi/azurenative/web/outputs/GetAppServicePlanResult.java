// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.outputs;

import com.pulumi.azurenative.web.outputs.HostingEnvironmentProfileResponse;
import com.pulumi.azurenative.web.outputs.KubeEnvironmentProfileResponse;
import com.pulumi.azurenative.web.outputs.SkuDescriptionResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAppServicePlanResult {
    /**
     * @return The time when the server farm free offer expires.
     * 
     */
    private @Nullable String freeOfferExpirationTime;
    /**
     * @return Geographical location for the App Service plan.
     * 
     */
    private String geoRegion;
    /**
     * @return Specification for the App Service Environment to use for the App Service plan.
     * 
     */
    private @Nullable HostingEnvironmentProfileResponse hostingEnvironmentProfile;
    /**
     * @return If Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     */
    private @Nullable Boolean hyperV;
    /**
     * @return Resource Id.
     * 
     */
    private String id;
    /**
     * @return If &lt;code&gt;true&lt;/code&gt;, this App Service Plan owns spot instances.
     * 
     */
    private @Nullable Boolean isSpot;
    /**
     * @return Obsolete: If Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     */
    private @Nullable Boolean isXenon;
    /**
     * @return Kind of resource.
     * 
     */
    private @Nullable String kind;
    /**
     * @return Specification for the Kubernetes Environment to use for the App Service plan.
     * 
     */
    private @Nullable KubeEnvironmentProfileResponse kubeEnvironmentProfile;
    /**
     * @return Resource Location.
     * 
     */
    private String location;
    /**
     * @return Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan
     * 
     */
    private @Nullable Integer maximumElasticWorkerCount;
    /**
     * @return Maximum number of instances that can be assigned to this App Service plan.
     * 
     */
    private Integer maximumNumberOfWorkers;
    /**
     * @return Resource Name.
     * 
     */
    private String name;
    /**
     * @return Number of apps assigned to this App Service plan.
     * 
     */
    private Integer numberOfSites;
    /**
     * @return If &lt;code&gt;true&lt;/code&gt;, apps assigned to this App Service plan can be scaled independently.
     * If &lt;code&gt;false&lt;/code&gt;, apps assigned to this App Service plan will scale to all instances of the plan.
     * 
     */
    private @Nullable Boolean perSiteScaling;
    /**
     * @return Provisioning state of the App Service Plan.
     * 
     */
    private String provisioningState;
    /**
     * @return If Linux app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     */
    private @Nullable Boolean reserved;
    /**
     * @return Resource group of the App Service plan.
     * 
     */
    private String resourceGroup;
    /**
     * @return Description of a SKU for a scalable resource.
     * 
     */
    private @Nullable SkuDescriptionResponse sku;
    /**
     * @return The time when the server farm expires. Valid only if it is a spot server farm.
     * 
     */
    private @Nullable String spotExpirationTime;
    /**
     * @return App Service plan status.
     * 
     */
    private String status;
    /**
     * @return App Service plan subscription.
     * 
     */
    private String subscription;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Scaling worker count.
     * 
     */
    private @Nullable Integer targetWorkerCount;
    /**
     * @return Scaling worker size ID.
     * 
     */
    private @Nullable Integer targetWorkerSizeId;
    /**
     * @return Resource type.
     * 
     */
    private String type;
    /**
     * @return Target worker tier assigned to the App Service plan.
     * 
     */
    private @Nullable String workerTierName;

    private GetAppServicePlanResult() {}
    /**
     * @return The time when the server farm free offer expires.
     * 
     */
    public Optional<String> freeOfferExpirationTime() {
        return Optional.ofNullable(this.freeOfferExpirationTime);
    }
    /**
     * @return Geographical location for the App Service plan.
     * 
     */
    public String geoRegion() {
        return this.geoRegion;
    }
    /**
     * @return Specification for the App Service Environment to use for the App Service plan.
     * 
     */
    public Optional<HostingEnvironmentProfileResponse> hostingEnvironmentProfile() {
        return Optional.ofNullable(this.hostingEnvironmentProfile);
    }
    /**
     * @return If Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     */
    public Optional<Boolean> hyperV() {
        return Optional.ofNullable(this.hyperV);
    }
    /**
     * @return Resource Id.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return If &lt;code&gt;true&lt;/code&gt;, this App Service Plan owns spot instances.
     * 
     */
    public Optional<Boolean> isSpot() {
        return Optional.ofNullable(this.isSpot);
    }
    /**
     * @return Obsolete: If Hyper-V container app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     */
    public Optional<Boolean> isXenon() {
        return Optional.ofNullable(this.isXenon);
    }
    /**
     * @return Kind of resource.
     * 
     */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }
    /**
     * @return Specification for the Kubernetes Environment to use for the App Service plan.
     * 
     */
    public Optional<KubeEnvironmentProfileResponse> kubeEnvironmentProfile() {
        return Optional.ofNullable(this.kubeEnvironmentProfile);
    }
    /**
     * @return Resource Location.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan
     * 
     */
    public Optional<Integer> maximumElasticWorkerCount() {
        return Optional.ofNullable(this.maximumElasticWorkerCount);
    }
    /**
     * @return Maximum number of instances that can be assigned to this App Service plan.
     * 
     */
    public Integer maximumNumberOfWorkers() {
        return this.maximumNumberOfWorkers;
    }
    /**
     * @return Resource Name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Number of apps assigned to this App Service plan.
     * 
     */
    public Integer numberOfSites() {
        return this.numberOfSites;
    }
    /**
     * @return If &lt;code&gt;true&lt;/code&gt;, apps assigned to this App Service plan can be scaled independently.
     * If &lt;code&gt;false&lt;/code&gt;, apps assigned to this App Service plan will scale to all instances of the plan.
     * 
     */
    public Optional<Boolean> perSiteScaling() {
        return Optional.ofNullable(this.perSiteScaling);
    }
    /**
     * @return Provisioning state of the App Service Plan.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return If Linux app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     */
    public Optional<Boolean> reserved() {
        return Optional.ofNullable(this.reserved);
    }
    /**
     * @return Resource group of the App Service plan.
     * 
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }
    /**
     * @return Description of a SKU for a scalable resource.
     * 
     */
    public Optional<SkuDescriptionResponse> sku() {
        return Optional.ofNullable(this.sku);
    }
    /**
     * @return The time when the server farm expires. Valid only if it is a spot server farm.
     * 
     */
    public Optional<String> spotExpirationTime() {
        return Optional.ofNullable(this.spotExpirationTime);
    }
    /**
     * @return App Service plan status.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return App Service plan subscription.
     * 
     */
    public String subscription() {
        return this.subscription;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Scaling worker count.
     * 
     */
    public Optional<Integer> targetWorkerCount() {
        return Optional.ofNullable(this.targetWorkerCount);
    }
    /**
     * @return Scaling worker size ID.
     * 
     */
    public Optional<Integer> targetWorkerSizeId() {
        return Optional.ofNullable(this.targetWorkerSizeId);
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Target worker tier assigned to the App Service plan.
     * 
     */
    public Optional<String> workerTierName() {
        return Optional.ofNullable(this.workerTierName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAppServicePlanResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String freeOfferExpirationTime;
        private String geoRegion;
        private @Nullable HostingEnvironmentProfileResponse hostingEnvironmentProfile;
        private @Nullable Boolean hyperV;
        private String id;
        private @Nullable Boolean isSpot;
        private @Nullable Boolean isXenon;
        private @Nullable String kind;
        private @Nullable KubeEnvironmentProfileResponse kubeEnvironmentProfile;
        private String location;
        private @Nullable Integer maximumElasticWorkerCount;
        private Integer maximumNumberOfWorkers;
        private String name;
        private Integer numberOfSites;
        private @Nullable Boolean perSiteScaling;
        private String provisioningState;
        private @Nullable Boolean reserved;
        private String resourceGroup;
        private @Nullable SkuDescriptionResponse sku;
        private @Nullable String spotExpirationTime;
        private String status;
        private String subscription;
        private @Nullable Map<String,String> tags;
        private @Nullable Integer targetWorkerCount;
        private @Nullable Integer targetWorkerSizeId;
        private String type;
        private @Nullable String workerTierName;
        public Builder() {}
        public Builder(GetAppServicePlanResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.freeOfferExpirationTime = defaults.freeOfferExpirationTime;
    	      this.geoRegion = defaults.geoRegion;
    	      this.hostingEnvironmentProfile = defaults.hostingEnvironmentProfile;
    	      this.hyperV = defaults.hyperV;
    	      this.id = defaults.id;
    	      this.isSpot = defaults.isSpot;
    	      this.isXenon = defaults.isXenon;
    	      this.kind = defaults.kind;
    	      this.kubeEnvironmentProfile = defaults.kubeEnvironmentProfile;
    	      this.location = defaults.location;
    	      this.maximumElasticWorkerCount = defaults.maximumElasticWorkerCount;
    	      this.maximumNumberOfWorkers = defaults.maximumNumberOfWorkers;
    	      this.name = defaults.name;
    	      this.numberOfSites = defaults.numberOfSites;
    	      this.perSiteScaling = defaults.perSiteScaling;
    	      this.provisioningState = defaults.provisioningState;
    	      this.reserved = defaults.reserved;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.sku = defaults.sku;
    	      this.spotExpirationTime = defaults.spotExpirationTime;
    	      this.status = defaults.status;
    	      this.subscription = defaults.subscription;
    	      this.tags = defaults.tags;
    	      this.targetWorkerCount = defaults.targetWorkerCount;
    	      this.targetWorkerSizeId = defaults.targetWorkerSizeId;
    	      this.type = defaults.type;
    	      this.workerTierName = defaults.workerTierName;
        }

        @CustomType.Setter
        public Builder freeOfferExpirationTime(@Nullable String freeOfferExpirationTime) {
            this.freeOfferExpirationTime = freeOfferExpirationTime;
            return this;
        }
        @CustomType.Setter
        public Builder geoRegion(String geoRegion) {
            this.geoRegion = Objects.requireNonNull(geoRegion);
            return this;
        }
        @CustomType.Setter
        public Builder hostingEnvironmentProfile(@Nullable HostingEnvironmentProfileResponse hostingEnvironmentProfile) {
            this.hostingEnvironmentProfile = hostingEnvironmentProfile;
            return this;
        }
        @CustomType.Setter
        public Builder hyperV(@Nullable Boolean hyperV) {
            this.hyperV = hyperV;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isSpot(@Nullable Boolean isSpot) {
            this.isSpot = isSpot;
            return this;
        }
        @CustomType.Setter
        public Builder isXenon(@Nullable Boolean isXenon) {
            this.isXenon = isXenon;
            return this;
        }
        @CustomType.Setter
        public Builder kind(@Nullable String kind) {
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder kubeEnvironmentProfile(@Nullable KubeEnvironmentProfileResponse kubeEnvironmentProfile) {
            this.kubeEnvironmentProfile = kubeEnvironmentProfile;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder maximumElasticWorkerCount(@Nullable Integer maximumElasticWorkerCount) {
            this.maximumElasticWorkerCount = maximumElasticWorkerCount;
            return this;
        }
        @CustomType.Setter
        public Builder maximumNumberOfWorkers(Integer maximumNumberOfWorkers) {
            this.maximumNumberOfWorkers = Objects.requireNonNull(maximumNumberOfWorkers);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder numberOfSites(Integer numberOfSites) {
            this.numberOfSites = Objects.requireNonNull(numberOfSites);
            return this;
        }
        @CustomType.Setter
        public Builder perSiteScaling(@Nullable Boolean perSiteScaling) {
            this.perSiteScaling = perSiteScaling;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        @CustomType.Setter
        public Builder reserved(@Nullable Boolean reserved) {
            this.reserved = reserved;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroup(String resourceGroup) {
            this.resourceGroup = Objects.requireNonNull(resourceGroup);
            return this;
        }
        @CustomType.Setter
        public Builder sku(@Nullable SkuDescriptionResponse sku) {
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder spotExpirationTime(@Nullable String spotExpirationTime) {
            this.spotExpirationTime = spotExpirationTime;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder subscription(String subscription) {
            this.subscription = Objects.requireNonNull(subscription);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder targetWorkerCount(@Nullable Integer targetWorkerCount) {
            this.targetWorkerCount = targetWorkerCount;
            return this;
        }
        @CustomType.Setter
        public Builder targetWorkerSizeId(@Nullable Integer targetWorkerSizeId) {
            this.targetWorkerSizeId = targetWorkerSizeId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder workerTierName(@Nullable String workerTierName) {
            this.workerTierName = workerTierName;
            return this;
        }
        public GetAppServicePlanResult build() {
            final var o = new GetAppServicePlanResult();
            o.freeOfferExpirationTime = freeOfferExpirationTime;
            o.geoRegion = geoRegion;
            o.hostingEnvironmentProfile = hostingEnvironmentProfile;
            o.hyperV = hyperV;
            o.id = id;
            o.isSpot = isSpot;
            o.isXenon = isXenon;
            o.kind = kind;
            o.kubeEnvironmentProfile = kubeEnvironmentProfile;
            o.location = location;
            o.maximumElasticWorkerCount = maximumElasticWorkerCount;
            o.maximumNumberOfWorkers = maximumNumberOfWorkers;
            o.name = name;
            o.numberOfSites = numberOfSites;
            o.perSiteScaling = perSiteScaling;
            o.provisioningState = provisioningState;
            o.reserved = reserved;
            o.resourceGroup = resourceGroup;
            o.sku = sku;
            o.spotExpirationTime = spotExpirationTime;
            o.status = status;
            o.subscription = subscription;
            o.tags = tags;
            o.targetWorkerCount = targetWorkerCount;
            o.targetWorkerSizeId = targetWorkerSizeId;
            o.type = type;
            o.workerTierName = workerTierName;
            return o;
        }
    }
}
