// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWebAppFunctionResult {
    /**
     * @return Config information.
     * 
     */
    private @Nullable Object config;
    /**
     * @return Config URI.
     * 
     */
    private @Nullable String configHref;
    /**
     * @return File list.
     * 
     */
    private @Nullable Map<String,String> files;
    /**
     * @return Function App ID.
     * 
     */
    private @Nullable String functionAppId;
    /**
     * @return Function URI.
     * 
     */
    private @Nullable String href;
    /**
     * @return Resource Id.
     * 
     */
    private String id;
    /**
     * @return The invocation URL
     * 
     */
    private @Nullable String invokeUrlTemplate;
    /**
     * @return Gets or sets a value indicating whether the function is disabled
     * 
     */
    private @Nullable Boolean isDisabled;
    /**
     * @return Kind of resource.
     * 
     */
    private @Nullable String kind;
    /**
     * @return The function language
     * 
     */
    private @Nullable String language;
    /**
     * @return Resource Name.
     * 
     */
    private String name;
    /**
     * @return Script URI.
     * 
     */
    private @Nullable String scriptHref;
    /**
     * @return Script root path URI.
     * 
     */
    private @Nullable String scriptRootPathHref;
    /**
     * @return Secrets file URI.
     * 
     */
    private @Nullable String secretsFileHref;
    /**
     * @return Test data used when testing via the Azure Portal.
     * 
     */
    private @Nullable String testData;
    /**
     * @return Test data URI.
     * 
     */
    private @Nullable String testDataHref;
    /**
     * @return Resource type.
     * 
     */
    private String type;

    private GetWebAppFunctionResult() {}
    /**
     * @return Config information.
     * 
     */
    public Optional<Object> config() {
        return Optional.ofNullable(this.config);
    }
    /**
     * @return Config URI.
     * 
     */
    public Optional<String> configHref() {
        return Optional.ofNullable(this.configHref);
    }
    /**
     * @return File list.
     * 
     */
    public Map<String,String> files() {
        return this.files == null ? Map.of() : this.files;
    }
    /**
     * @return Function App ID.
     * 
     */
    public Optional<String> functionAppId() {
        return Optional.ofNullable(this.functionAppId);
    }
    /**
     * @return Function URI.
     * 
     */
    public Optional<String> href() {
        return Optional.ofNullable(this.href);
    }
    /**
     * @return Resource Id.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The invocation URL
     * 
     */
    public Optional<String> invokeUrlTemplate() {
        return Optional.ofNullable(this.invokeUrlTemplate);
    }
    /**
     * @return Gets or sets a value indicating whether the function is disabled
     * 
     */
    public Optional<Boolean> isDisabled() {
        return Optional.ofNullable(this.isDisabled);
    }
    /**
     * @return Kind of resource.
     * 
     */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }
    /**
     * @return The function language
     * 
     */
    public Optional<String> language() {
        return Optional.ofNullable(this.language);
    }
    /**
     * @return Resource Name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Script URI.
     * 
     */
    public Optional<String> scriptHref() {
        return Optional.ofNullable(this.scriptHref);
    }
    /**
     * @return Script root path URI.
     * 
     */
    public Optional<String> scriptRootPathHref() {
        return Optional.ofNullable(this.scriptRootPathHref);
    }
    /**
     * @return Secrets file URI.
     * 
     */
    public Optional<String> secretsFileHref() {
        return Optional.ofNullable(this.secretsFileHref);
    }
    /**
     * @return Test data used when testing via the Azure Portal.
     * 
     */
    public Optional<String> testData() {
        return Optional.ofNullable(this.testData);
    }
    /**
     * @return Test data URI.
     * 
     */
    public Optional<String> testDataHref() {
        return Optional.ofNullable(this.testDataHref);
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWebAppFunctionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Object config;
        private @Nullable String configHref;
        private @Nullable Map<String,String> files;
        private @Nullable String functionAppId;
        private @Nullable String href;
        private String id;
        private @Nullable String invokeUrlTemplate;
        private @Nullable Boolean isDisabled;
        private @Nullable String kind;
        private @Nullable String language;
        private String name;
        private @Nullable String scriptHref;
        private @Nullable String scriptRootPathHref;
        private @Nullable String secretsFileHref;
        private @Nullable String testData;
        private @Nullable String testDataHref;
        private String type;
        public Builder() {}
        public Builder(GetWebAppFunctionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.config = defaults.config;
    	      this.configHref = defaults.configHref;
    	      this.files = defaults.files;
    	      this.functionAppId = defaults.functionAppId;
    	      this.href = defaults.href;
    	      this.id = defaults.id;
    	      this.invokeUrlTemplate = defaults.invokeUrlTemplate;
    	      this.isDisabled = defaults.isDisabled;
    	      this.kind = defaults.kind;
    	      this.language = defaults.language;
    	      this.name = defaults.name;
    	      this.scriptHref = defaults.scriptHref;
    	      this.scriptRootPathHref = defaults.scriptRootPathHref;
    	      this.secretsFileHref = defaults.secretsFileHref;
    	      this.testData = defaults.testData;
    	      this.testDataHref = defaults.testDataHref;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder config(@Nullable Object config) {
            this.config = config;
            return this;
        }
        @CustomType.Setter
        public Builder configHref(@Nullable String configHref) {
            this.configHref = configHref;
            return this;
        }
        @CustomType.Setter
        public Builder files(@Nullable Map<String,String> files) {
            this.files = files;
            return this;
        }
        @CustomType.Setter
        public Builder functionAppId(@Nullable String functionAppId) {
            this.functionAppId = functionAppId;
            return this;
        }
        @CustomType.Setter
        public Builder href(@Nullable String href) {
            this.href = href;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder invokeUrlTemplate(@Nullable String invokeUrlTemplate) {
            this.invokeUrlTemplate = invokeUrlTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder isDisabled(@Nullable Boolean isDisabled) {
            this.isDisabled = isDisabled;
            return this;
        }
        @CustomType.Setter
        public Builder kind(@Nullable String kind) {
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder language(@Nullable String language) {
            this.language = language;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder scriptHref(@Nullable String scriptHref) {
            this.scriptHref = scriptHref;
            return this;
        }
        @CustomType.Setter
        public Builder scriptRootPathHref(@Nullable String scriptRootPathHref) {
            this.scriptRootPathHref = scriptRootPathHref;
            return this;
        }
        @CustomType.Setter
        public Builder secretsFileHref(@Nullable String secretsFileHref) {
            this.secretsFileHref = secretsFileHref;
            return this;
        }
        @CustomType.Setter
        public Builder testData(@Nullable String testData) {
            this.testData = testData;
            return this;
        }
        @CustomType.Setter
        public Builder testDataHref(@Nullable String testDataHref) {
            this.testDataHref = testDataHref;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetWebAppFunctionResult build() {
            final var o = new GetWebAppFunctionResult();
            o.config = config;
            o.configHref = configHref;
            o.files = files;
            o.functionAppId = functionAppId;
            o.href = href;
            o.id = id;
            o.invokeUrlTemplate = invokeUrlTemplate;
            o.isDisabled = isDisabled;
            o.kind = kind;
            o.language = language;
            o.name = name;
            o.scriptHref = scriptHref;
            o.scriptRootPathHref = scriptRootPathHref;
            o.secretsFileHref = secretsFileHref;
            o.testData = testData;
            o.testDataHref = testDataHref;
            o.type = type;
            return o;
        }
    }
}
