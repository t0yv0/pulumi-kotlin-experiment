// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.outputs;

import com.pulumi.azurenative.web.outputs.HostNameSslStateResponse;
import com.pulumi.azurenative.web.outputs.HostingEnvironmentProfileResponse;
import com.pulumi.azurenative.web.outputs.ManagedServiceIdentityResponse;
import com.pulumi.azurenative.web.outputs.SiteConfigResponse;
import com.pulumi.azurenative.web.outputs.SlotSwapStatusResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWebAppResult {
    /**
     * @return Management information availability state for the app.
     * 
     */
    private String availabilityState;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to enable client affinity; &lt;code&gt;false&lt;/code&gt; to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is &lt;code&gt;true&lt;/code&gt;.
     * 
     */
    private @Nullable Boolean clientAffinityEnabled;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to enable client certificate authentication (TLS mutual authentication); otherwise, &lt;code&gt;false&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private @Nullable Boolean clientCertEnabled;
    /**
     * @return client certificate authentication comma-separated exclusion paths
     * 
     */
    private @Nullable String clientCertExclusionPaths;
    /**
     * @return This composes with ClientCertEnabled setting.
     * - ClientCertEnabled: false means ClientCert is ignored.
     * - ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.
     * - ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted.
     * 
     */
    private @Nullable String clientCertMode;
    /**
     * @return Size of the function container.
     * 
     */
    private @Nullable Integer containerSize;
    /**
     * @return Unique identifier that verifies the custom domains assigned to the app. Customer will add this id to a txt record for verification.
     * 
     */
    private @Nullable String customDomainVerificationId;
    /**
     * @return Maximum allowed daily memory-time quota (applicable on dynamic apps only).
     * 
     */
    private @Nullable Integer dailyMemoryTimeQuota;
    /**
     * @return Default hostname of the app. Read-only.
     * 
     */
    private String defaultHostName;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if the app is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. Setting this value to false disables the app (takes the app offline).
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,
     * the app is not served on those hostnames.
     * 
     */
    private List<String> enabledHostNames;
    /**
     * @return Hostname SSL states are used to manage the SSL bindings for app&#39;s hostnames.
     * 
     */
    private @Nullable List<HostNameSslStateResponse> hostNameSslStates;
    /**
     * @return Hostnames associated with the app.
     * 
     */
    private List<String> hostNames;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to disable the public hostnames of the app; otherwise, &lt;code&gt;false&lt;/code&gt;.
     *  If &lt;code&gt;true&lt;/code&gt;, the app is only accessible via API management process.
     * 
     */
    private @Nullable Boolean hostNamesDisabled;
    /**
     * @return App Service Environment to use for the app.
     * 
     */
    private @Nullable HostingEnvironmentProfileResponse hostingEnvironmentProfile;
    /**
     * @return HttpsOnly: configures a web site to accept only https requests. Issues redirect for
     * http requests
     * 
     */
    private @Nullable Boolean httpsOnly;
    /**
     * @return Hyper-V sandbox.
     * 
     */
    private @Nullable Boolean hyperV;
    /**
     * @return Resource Id.
     * 
     */
    private String id;
    /**
     * @return Managed service identity.
     * 
     */
    private @Nullable ManagedServiceIdentityResponse identity;
    /**
     * @return Specifies an operation id if this site has a pending operation.
     * 
     */
    private String inProgressOperationId;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if the app is a default container; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private Boolean isDefaultContainer;
    /**
     * @return Obsolete: Hyper-V sandbox.
     * 
     */
    private @Nullable Boolean isXenon;
    /**
     * @return Identity to use for Key Vault Reference authentication.
     * 
     */
    private @Nullable String keyVaultReferenceIdentity;
    /**
     * @return Kind of resource.
     * 
     */
    private @Nullable String kind;
    /**
     * @return Last time the app was modified, in UTC. Read-only.
     * 
     */
    private String lastModifiedTimeUtc;
    /**
     * @return Resource Location.
     * 
     */
    private String location;
    /**
     * @return Maximum number of workers.
     * This only applies to Functions container.
     * 
     */
    private Integer maxNumberOfWorkers;
    /**
     * @return Resource Name.
     * 
     */
    private String name;
    /**
     * @return List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted with current settings. Read-only.
     * 
     */
    private String outboundIpAddresses;
    /**
     * @return List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent. Read-only.
     * 
     */
    private String possibleOutboundIpAddresses;
    /**
     * @return Site redundancy mode
     * 
     */
    private @Nullable String redundancyMode;
    /**
     * @return Name of the repository site.
     * 
     */
    private String repositorySiteName;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if reserved; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private @Nullable Boolean reserved;
    /**
     * @return Name of the resource group the app belongs to. Read-only.
     * 
     */
    private String resourceGroup;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to stop SCM (KUDU) site when the app is stopped; otherwise, &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private @Nullable Boolean scmSiteAlsoStopped;
    /**
     * @return Resource ID of the associated App Service plan, formatted as: &#34;/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}&#34;.
     * 
     */
    private @Nullable String serverFarmId;
    /**
     * @return Configuration of the app.
     * 
     */
    private @Nullable SiteConfigResponse siteConfig;
    /**
     * @return Status of the last deployment slot swap operation.
     * 
     */
    private SlotSwapStatusResponse slotSwapStatus;
    /**
     * @return Current state of the app.
     * 
     */
    private String state;
    /**
     * @return Checks if Customer provided storage account is required
     * 
     */
    private @Nullable Boolean storageAccountRequired;
    /**
     * @return App suspended till in case memory-time quota is exceeded.
     * 
     */
    private String suspendedTill;
    /**
     * @return Resource tags.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return Specifies which deployment slot this app will swap into. Read-only.
     * 
     */
    private String targetSwapSlot;
    /**
     * @return Azure Traffic Manager hostnames associated with the app. Read-only.
     * 
     */
    private List<String> trafficManagerHostNames;
    /**
     * @return Resource type.
     * 
     */
    private String type;
    /**
     * @return State indicating whether the app has exceeded its quota usage. Read-only.
     * 
     */
    private String usageState;
    /**
     * @return Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration.
     * This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}
     * 
     */
    private @Nullable String virtualNetworkSubnetId;

    private GetWebAppResult() {}
    /**
     * @return Management information availability state for the app.
     * 
     */
    public String availabilityState() {
        return this.availabilityState;
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to enable client affinity; &lt;code&gt;false&lt;/code&gt; to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is &lt;code&gt;true&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> clientAffinityEnabled() {
        return Optional.ofNullable(this.clientAffinityEnabled);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to enable client certificate authentication (TLS mutual authentication); otherwise, &lt;code&gt;false&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> clientCertEnabled() {
        return Optional.ofNullable(this.clientCertEnabled);
    }
    /**
     * @return client certificate authentication comma-separated exclusion paths
     * 
     */
    public Optional<String> clientCertExclusionPaths() {
        return Optional.ofNullable(this.clientCertExclusionPaths);
    }
    /**
     * @return This composes with ClientCertEnabled setting.
     * - ClientCertEnabled: false means ClientCert is ignored.
     * - ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.
     * - ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted.
     * 
     */
    public Optional<String> clientCertMode() {
        return Optional.ofNullable(this.clientCertMode);
    }
    /**
     * @return Size of the function container.
     * 
     */
    public Optional<Integer> containerSize() {
        return Optional.ofNullable(this.containerSize);
    }
    /**
     * @return Unique identifier that verifies the custom domains assigned to the app. Customer will add this id to a txt record for verification.
     * 
     */
    public Optional<String> customDomainVerificationId() {
        return Optional.ofNullable(this.customDomainVerificationId);
    }
    /**
     * @return Maximum allowed daily memory-time quota (applicable on dynamic apps only).
     * 
     */
    public Optional<Integer> dailyMemoryTimeQuota() {
        return Optional.ofNullable(this.dailyMemoryTimeQuota);
    }
    /**
     * @return Default hostname of the app. Read-only.
     * 
     */
    public String defaultHostName() {
        return this.defaultHostName;
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if the app is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. Setting this value to false disables the app (takes the app offline).
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,
     * the app is not served on those hostnames.
     * 
     */
    public List<String> enabledHostNames() {
        return this.enabledHostNames;
    }
    /**
     * @return Hostname SSL states are used to manage the SSL bindings for app&#39;s hostnames.
     * 
     */
    public List<HostNameSslStateResponse> hostNameSslStates() {
        return this.hostNameSslStates == null ? List.of() : this.hostNameSslStates;
    }
    /**
     * @return Hostnames associated with the app.
     * 
     */
    public List<String> hostNames() {
        return this.hostNames;
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to disable the public hostnames of the app; otherwise, &lt;code&gt;false&lt;/code&gt;.
     *  If &lt;code&gt;true&lt;/code&gt;, the app is only accessible via API management process.
     * 
     */
    public Optional<Boolean> hostNamesDisabled() {
        return Optional.ofNullable(this.hostNamesDisabled);
    }
    /**
     * @return App Service Environment to use for the app.
     * 
     */
    public Optional<HostingEnvironmentProfileResponse> hostingEnvironmentProfile() {
        return Optional.ofNullable(this.hostingEnvironmentProfile);
    }
    /**
     * @return HttpsOnly: configures a web site to accept only https requests. Issues redirect for
     * http requests
     * 
     */
    public Optional<Boolean> httpsOnly() {
        return Optional.ofNullable(this.httpsOnly);
    }
    /**
     * @return Hyper-V sandbox.
     * 
     */
    public Optional<Boolean> hyperV() {
        return Optional.ofNullable(this.hyperV);
    }
    /**
     * @return Resource Id.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Managed service identity.
     * 
     */
    public Optional<ManagedServiceIdentityResponse> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * @return Specifies an operation id if this site has a pending operation.
     * 
     */
    public String inProgressOperationId() {
        return this.inProgressOperationId;
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if the app is a default container; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Boolean isDefaultContainer() {
        return this.isDefaultContainer;
    }
    /**
     * @return Obsolete: Hyper-V sandbox.
     * 
     */
    public Optional<Boolean> isXenon() {
        return Optional.ofNullable(this.isXenon);
    }
    /**
     * @return Identity to use for Key Vault Reference authentication.
     * 
     */
    public Optional<String> keyVaultReferenceIdentity() {
        return Optional.ofNullable(this.keyVaultReferenceIdentity);
    }
    /**
     * @return Kind of resource.
     * 
     */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }
    /**
     * @return Last time the app was modified, in UTC. Read-only.
     * 
     */
    public String lastModifiedTimeUtc() {
        return this.lastModifiedTimeUtc;
    }
    /**
     * @return Resource Location.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Maximum number of workers.
     * This only applies to Functions container.
     * 
     */
    public Integer maxNumberOfWorkers() {
        return this.maxNumberOfWorkers;
    }
    /**
     * @return Resource Name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted with current settings. Read-only.
     * 
     */
    public String outboundIpAddresses() {
        return this.outboundIpAddresses;
    }
    /**
     * @return List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent. Read-only.
     * 
     */
    public String possibleOutboundIpAddresses() {
        return this.possibleOutboundIpAddresses;
    }
    /**
     * @return Site redundancy mode
     * 
     */
    public Optional<String> redundancyMode() {
        return Optional.ofNullable(this.redundancyMode);
    }
    /**
     * @return Name of the repository site.
     * 
     */
    public String repositorySiteName() {
        return this.repositorySiteName;
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if reserved; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> reserved() {
        return Optional.ofNullable(this.reserved);
    }
    /**
     * @return Name of the resource group the app belongs to. Read-only.
     * 
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to stop SCM (KUDU) site when the app is stopped; otherwise, &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> scmSiteAlsoStopped() {
        return Optional.ofNullable(this.scmSiteAlsoStopped);
    }
    /**
     * @return Resource ID of the associated App Service plan, formatted as: &#34;/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}&#34;.
     * 
     */
    public Optional<String> serverFarmId() {
        return Optional.ofNullable(this.serverFarmId);
    }
    /**
     * @return Configuration of the app.
     * 
     */
    public Optional<SiteConfigResponse> siteConfig() {
        return Optional.ofNullable(this.siteConfig);
    }
    /**
     * @return Status of the last deployment slot swap operation.
     * 
     */
    public SlotSwapStatusResponse slotSwapStatus() {
        return this.slotSwapStatus;
    }
    /**
     * @return Current state of the app.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Checks if Customer provided storage account is required
     * 
     */
    public Optional<Boolean> storageAccountRequired() {
        return Optional.ofNullable(this.storageAccountRequired);
    }
    /**
     * @return App suspended till in case memory-time quota is exceeded.
     * 
     */
    public String suspendedTill() {
        return this.suspendedTill;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Specifies which deployment slot this app will swap into. Read-only.
     * 
     */
    public String targetSwapSlot() {
        return this.targetSwapSlot;
    }
    /**
     * @return Azure Traffic Manager hostnames associated with the app. Read-only.
     * 
     */
    public List<String> trafficManagerHostNames() {
        return this.trafficManagerHostNames;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return State indicating whether the app has exceeded its quota usage. Read-only.
     * 
     */
    public String usageState() {
        return this.usageState;
    }
    /**
     * @return Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration.
     * This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}
     * 
     */
    public Optional<String> virtualNetworkSubnetId() {
        return Optional.ofNullable(this.virtualNetworkSubnetId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWebAppResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availabilityState;
        private @Nullable Boolean clientAffinityEnabled;
        private @Nullable Boolean clientCertEnabled;
        private @Nullable String clientCertExclusionPaths;
        private @Nullable String clientCertMode;
        private @Nullable Integer containerSize;
        private @Nullable String customDomainVerificationId;
        private @Nullable Integer dailyMemoryTimeQuota;
        private String defaultHostName;
        private @Nullable Boolean enabled;
        private List<String> enabledHostNames;
        private @Nullable List<HostNameSslStateResponse> hostNameSslStates;
        private List<String> hostNames;
        private @Nullable Boolean hostNamesDisabled;
        private @Nullable HostingEnvironmentProfileResponse hostingEnvironmentProfile;
        private @Nullable Boolean httpsOnly;
        private @Nullable Boolean hyperV;
        private String id;
        private @Nullable ManagedServiceIdentityResponse identity;
        private String inProgressOperationId;
        private Boolean isDefaultContainer;
        private @Nullable Boolean isXenon;
        private @Nullable String keyVaultReferenceIdentity;
        private @Nullable String kind;
        private String lastModifiedTimeUtc;
        private String location;
        private Integer maxNumberOfWorkers;
        private String name;
        private String outboundIpAddresses;
        private String possibleOutboundIpAddresses;
        private @Nullable String redundancyMode;
        private String repositorySiteName;
        private @Nullable Boolean reserved;
        private String resourceGroup;
        private @Nullable Boolean scmSiteAlsoStopped;
        private @Nullable String serverFarmId;
        private @Nullable SiteConfigResponse siteConfig;
        private SlotSwapStatusResponse slotSwapStatus;
        private String state;
        private @Nullable Boolean storageAccountRequired;
        private String suspendedTill;
        private @Nullable Map<String,String> tags;
        private String targetSwapSlot;
        private List<String> trafficManagerHostNames;
        private String type;
        private String usageState;
        private @Nullable String virtualNetworkSubnetId;
        public Builder() {}
        public Builder(GetWebAppResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityState = defaults.availabilityState;
    	      this.clientAffinityEnabled = defaults.clientAffinityEnabled;
    	      this.clientCertEnabled = defaults.clientCertEnabled;
    	      this.clientCertExclusionPaths = defaults.clientCertExclusionPaths;
    	      this.clientCertMode = defaults.clientCertMode;
    	      this.containerSize = defaults.containerSize;
    	      this.customDomainVerificationId = defaults.customDomainVerificationId;
    	      this.dailyMemoryTimeQuota = defaults.dailyMemoryTimeQuota;
    	      this.defaultHostName = defaults.defaultHostName;
    	      this.enabled = defaults.enabled;
    	      this.enabledHostNames = defaults.enabledHostNames;
    	      this.hostNameSslStates = defaults.hostNameSslStates;
    	      this.hostNames = defaults.hostNames;
    	      this.hostNamesDisabled = defaults.hostNamesDisabled;
    	      this.hostingEnvironmentProfile = defaults.hostingEnvironmentProfile;
    	      this.httpsOnly = defaults.httpsOnly;
    	      this.hyperV = defaults.hyperV;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.inProgressOperationId = defaults.inProgressOperationId;
    	      this.isDefaultContainer = defaults.isDefaultContainer;
    	      this.isXenon = defaults.isXenon;
    	      this.keyVaultReferenceIdentity = defaults.keyVaultReferenceIdentity;
    	      this.kind = defaults.kind;
    	      this.lastModifiedTimeUtc = defaults.lastModifiedTimeUtc;
    	      this.location = defaults.location;
    	      this.maxNumberOfWorkers = defaults.maxNumberOfWorkers;
    	      this.name = defaults.name;
    	      this.outboundIpAddresses = defaults.outboundIpAddresses;
    	      this.possibleOutboundIpAddresses = defaults.possibleOutboundIpAddresses;
    	      this.redundancyMode = defaults.redundancyMode;
    	      this.repositorySiteName = defaults.repositorySiteName;
    	      this.reserved = defaults.reserved;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.scmSiteAlsoStopped = defaults.scmSiteAlsoStopped;
    	      this.serverFarmId = defaults.serverFarmId;
    	      this.siteConfig = defaults.siteConfig;
    	      this.slotSwapStatus = defaults.slotSwapStatus;
    	      this.state = defaults.state;
    	      this.storageAccountRequired = defaults.storageAccountRequired;
    	      this.suspendedTill = defaults.suspendedTill;
    	      this.tags = defaults.tags;
    	      this.targetSwapSlot = defaults.targetSwapSlot;
    	      this.trafficManagerHostNames = defaults.trafficManagerHostNames;
    	      this.type = defaults.type;
    	      this.usageState = defaults.usageState;
    	      this.virtualNetworkSubnetId = defaults.virtualNetworkSubnetId;
        }

        @CustomType.Setter
        public Builder availabilityState(String availabilityState) {
            this.availabilityState = Objects.requireNonNull(availabilityState);
            return this;
        }
        @CustomType.Setter
        public Builder clientAffinityEnabled(@Nullable Boolean clientAffinityEnabled) {
            this.clientAffinityEnabled = clientAffinityEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder clientCertEnabled(@Nullable Boolean clientCertEnabled) {
            this.clientCertEnabled = clientCertEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder clientCertExclusionPaths(@Nullable String clientCertExclusionPaths) {
            this.clientCertExclusionPaths = clientCertExclusionPaths;
            return this;
        }
        @CustomType.Setter
        public Builder clientCertMode(@Nullable String clientCertMode) {
            this.clientCertMode = clientCertMode;
            return this;
        }
        @CustomType.Setter
        public Builder containerSize(@Nullable Integer containerSize) {
            this.containerSize = containerSize;
            return this;
        }
        @CustomType.Setter
        public Builder customDomainVerificationId(@Nullable String customDomainVerificationId) {
            this.customDomainVerificationId = customDomainVerificationId;
            return this;
        }
        @CustomType.Setter
        public Builder dailyMemoryTimeQuota(@Nullable Integer dailyMemoryTimeQuota) {
            this.dailyMemoryTimeQuota = dailyMemoryTimeQuota;
            return this;
        }
        @CustomType.Setter
        public Builder defaultHostName(String defaultHostName) {
            this.defaultHostName = Objects.requireNonNull(defaultHostName);
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder enabledHostNames(List<String> enabledHostNames) {
            this.enabledHostNames = Objects.requireNonNull(enabledHostNames);
            return this;
        }
        public Builder enabledHostNames(String... enabledHostNames) {
            return enabledHostNames(List.of(enabledHostNames));
        }
        @CustomType.Setter
        public Builder hostNameSslStates(@Nullable List<HostNameSslStateResponse> hostNameSslStates) {
            this.hostNameSslStates = hostNameSslStates;
            return this;
        }
        public Builder hostNameSslStates(HostNameSslStateResponse... hostNameSslStates) {
            return hostNameSslStates(List.of(hostNameSslStates));
        }
        @CustomType.Setter
        public Builder hostNames(List<String> hostNames) {
            this.hostNames = Objects.requireNonNull(hostNames);
            return this;
        }
        public Builder hostNames(String... hostNames) {
            return hostNames(List.of(hostNames));
        }
        @CustomType.Setter
        public Builder hostNamesDisabled(@Nullable Boolean hostNamesDisabled) {
            this.hostNamesDisabled = hostNamesDisabled;
            return this;
        }
        @CustomType.Setter
        public Builder hostingEnvironmentProfile(@Nullable HostingEnvironmentProfileResponse hostingEnvironmentProfile) {
            this.hostingEnvironmentProfile = hostingEnvironmentProfile;
            return this;
        }
        @CustomType.Setter
        public Builder httpsOnly(@Nullable Boolean httpsOnly) {
            this.httpsOnly = httpsOnly;
            return this;
        }
        @CustomType.Setter
        public Builder hyperV(@Nullable Boolean hyperV) {
            this.hyperV = hyperV;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identity(@Nullable ManagedServiceIdentityResponse identity) {
            this.identity = identity;
            return this;
        }
        @CustomType.Setter
        public Builder inProgressOperationId(String inProgressOperationId) {
            this.inProgressOperationId = Objects.requireNonNull(inProgressOperationId);
            return this;
        }
        @CustomType.Setter
        public Builder isDefaultContainer(Boolean isDefaultContainer) {
            this.isDefaultContainer = Objects.requireNonNull(isDefaultContainer);
            return this;
        }
        @CustomType.Setter
        public Builder isXenon(@Nullable Boolean isXenon) {
            this.isXenon = isXenon;
            return this;
        }
        @CustomType.Setter
        public Builder keyVaultReferenceIdentity(@Nullable String keyVaultReferenceIdentity) {
            this.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
            return this;
        }
        @CustomType.Setter
        public Builder kind(@Nullable String kind) {
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder lastModifiedTimeUtc(String lastModifiedTimeUtc) {
            this.lastModifiedTimeUtc = Objects.requireNonNull(lastModifiedTimeUtc);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder maxNumberOfWorkers(Integer maxNumberOfWorkers) {
            this.maxNumberOfWorkers = Objects.requireNonNull(maxNumberOfWorkers);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder outboundIpAddresses(String outboundIpAddresses) {
            this.outboundIpAddresses = Objects.requireNonNull(outboundIpAddresses);
            return this;
        }
        @CustomType.Setter
        public Builder possibleOutboundIpAddresses(String possibleOutboundIpAddresses) {
            this.possibleOutboundIpAddresses = Objects.requireNonNull(possibleOutboundIpAddresses);
            return this;
        }
        @CustomType.Setter
        public Builder redundancyMode(@Nullable String redundancyMode) {
            this.redundancyMode = redundancyMode;
            return this;
        }
        @CustomType.Setter
        public Builder repositorySiteName(String repositorySiteName) {
            this.repositorySiteName = Objects.requireNonNull(repositorySiteName);
            return this;
        }
        @CustomType.Setter
        public Builder reserved(@Nullable Boolean reserved) {
            this.reserved = reserved;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroup(String resourceGroup) {
            this.resourceGroup = Objects.requireNonNull(resourceGroup);
            return this;
        }
        @CustomType.Setter
        public Builder scmSiteAlsoStopped(@Nullable Boolean scmSiteAlsoStopped) {
            this.scmSiteAlsoStopped = scmSiteAlsoStopped;
            return this;
        }
        @CustomType.Setter
        public Builder serverFarmId(@Nullable String serverFarmId) {
            this.serverFarmId = serverFarmId;
            return this;
        }
        @CustomType.Setter
        public Builder siteConfig(@Nullable SiteConfigResponse siteConfig) {
            this.siteConfig = siteConfig;
            return this;
        }
        @CustomType.Setter
        public Builder slotSwapStatus(SlotSwapStatusResponse slotSwapStatus) {
            this.slotSwapStatus = Objects.requireNonNull(slotSwapStatus);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder storageAccountRequired(@Nullable Boolean storageAccountRequired) {
            this.storageAccountRequired = storageAccountRequired;
            return this;
        }
        @CustomType.Setter
        public Builder suspendedTill(String suspendedTill) {
            this.suspendedTill = Objects.requireNonNull(suspendedTill);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder targetSwapSlot(String targetSwapSlot) {
            this.targetSwapSlot = Objects.requireNonNull(targetSwapSlot);
            return this;
        }
        @CustomType.Setter
        public Builder trafficManagerHostNames(List<String> trafficManagerHostNames) {
            this.trafficManagerHostNames = Objects.requireNonNull(trafficManagerHostNames);
            return this;
        }
        public Builder trafficManagerHostNames(String... trafficManagerHostNames) {
            return trafficManagerHostNames(List.of(trafficManagerHostNames));
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder usageState(String usageState) {
            this.usageState = Objects.requireNonNull(usageState);
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetworkSubnetId(@Nullable String virtualNetworkSubnetId) {
            this.virtualNetworkSubnetId = virtualNetworkSubnetId;
            return this;
        }
        public GetWebAppResult build() {
            final var o = new GetWebAppResult();
            o.availabilityState = availabilityState;
            o.clientAffinityEnabled = clientAffinityEnabled;
            o.clientCertEnabled = clientCertEnabled;
            o.clientCertExclusionPaths = clientCertExclusionPaths;
            o.clientCertMode = clientCertMode;
            o.containerSize = containerSize;
            o.customDomainVerificationId = customDomainVerificationId;
            o.dailyMemoryTimeQuota = dailyMemoryTimeQuota;
            o.defaultHostName = defaultHostName;
            o.enabled = enabled;
            o.enabledHostNames = enabledHostNames;
            o.hostNameSslStates = hostNameSslStates;
            o.hostNames = hostNames;
            o.hostNamesDisabled = hostNamesDisabled;
            o.hostingEnvironmentProfile = hostingEnvironmentProfile;
            o.httpsOnly = httpsOnly;
            o.hyperV = hyperV;
            o.id = id;
            o.identity = identity;
            o.inProgressOperationId = inProgressOperationId;
            o.isDefaultContainer = isDefaultContainer;
            o.isXenon = isXenon;
            o.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
            o.kind = kind;
            o.lastModifiedTimeUtc = lastModifiedTimeUtc;
            o.location = location;
            o.maxNumberOfWorkers = maxNumberOfWorkers;
            o.name = name;
            o.outboundIpAddresses = outboundIpAddresses;
            o.possibleOutboundIpAddresses = possibleOutboundIpAddresses;
            o.redundancyMode = redundancyMode;
            o.repositorySiteName = repositorySiteName;
            o.reserved = reserved;
            o.resourceGroup = resourceGroup;
            o.scmSiteAlsoStopped = scmSiteAlsoStopped;
            o.serverFarmId = serverFarmId;
            o.siteConfig = siteConfig;
            o.slotSwapStatus = slotSwapStatus;
            o.state = state;
            o.storageAccountRequired = storageAccountRequired;
            o.suspendedTill = suspendedTill;
            o.tags = tags;
            o.targetSwapSlot = targetSwapSlot;
            o.trafficManagerHostNames = trafficManagerHostNames;
            o.type = type;
            o.usageState = usageState;
            o.virtualNetworkSubnetId = virtualNetworkSubnetId;
            return o;
        }
    }
}
