// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWebAppSiteExtensionResult {
    /**
     * @return List of authors.
     * 
     */
    private @Nullable List<String> authors;
    /**
     * @return Site Extension comment.
     * 
     */
    private @Nullable String comment;
    /**
     * @return Detailed description.
     * 
     */
    private @Nullable String description;
    /**
     * @return Count of downloads.
     * 
     */
    private @Nullable Integer downloadCount;
    /**
     * @return Site extension ID.
     * 
     */
    private @Nullable String extensionId;
    /**
     * @return Site extension type.
     * 
     */
    private @Nullable String extensionType;
    /**
     * @return Extension URL.
     * 
     */
    private @Nullable String extensionUrl;
    /**
     * @return Feed URL.
     * 
     */
    private @Nullable String feedUrl;
    /**
     * @return Icon URL.
     * 
     */
    private @Nullable String iconUrl;
    /**
     * @return Resource Id.
     * 
     */
    private String id;
    /**
     * @return Installed timestamp.
     * 
     */
    private @Nullable String installedDateTime;
    /**
     * @return Installer command line parameters.
     * 
     */
    private @Nullable String installerCommandLineParams;
    /**
     * @return Kind of resource.
     * 
     */
    private @Nullable String kind;
    /**
     * @return License URL.
     * 
     */
    private @Nullable String licenseUrl;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if the local version is the latest version; &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     */
    private @Nullable Boolean localIsLatestVersion;
    /**
     * @return Local path.
     * 
     */
    private @Nullable String localPath;
    /**
     * @return Resource Name.
     * 
     */
    private String name;
    /**
     * @return Project URL.
     * 
     */
    private @Nullable String projectUrl;
    /**
     * @return Provisioning state.
     * 
     */
    private @Nullable String provisioningState;
    /**
     * @return Published timestamp.
     * 
     */
    private @Nullable String publishedDateTime;
    /**
     * @return Summary description.
     * 
     */
    private @Nullable String summary;
    private @Nullable String title;
    /**
     * @return Resource type.
     * 
     */
    private String type;
    /**
     * @return Version information.
     * 
     */
    private @Nullable String version;

    private GetWebAppSiteExtensionResult() {}
    /**
     * @return List of authors.
     * 
     */
    public List<String> authors() {
        return this.authors == null ? List.of() : this.authors;
    }
    /**
     * @return Site Extension comment.
     * 
     */
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }
    /**
     * @return Detailed description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Count of downloads.
     * 
     */
    public Optional<Integer> downloadCount() {
        return Optional.ofNullable(this.downloadCount);
    }
    /**
     * @return Site extension ID.
     * 
     */
    public Optional<String> extensionId() {
        return Optional.ofNullable(this.extensionId);
    }
    /**
     * @return Site extension type.
     * 
     */
    public Optional<String> extensionType() {
        return Optional.ofNullable(this.extensionType);
    }
    /**
     * @return Extension URL.
     * 
     */
    public Optional<String> extensionUrl() {
        return Optional.ofNullable(this.extensionUrl);
    }
    /**
     * @return Feed URL.
     * 
     */
    public Optional<String> feedUrl() {
        return Optional.ofNullable(this.feedUrl);
    }
    /**
     * @return Icon URL.
     * 
     */
    public Optional<String> iconUrl() {
        return Optional.ofNullable(this.iconUrl);
    }
    /**
     * @return Resource Id.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Installed timestamp.
     * 
     */
    public Optional<String> installedDateTime() {
        return Optional.ofNullable(this.installedDateTime);
    }
    /**
     * @return Installer command line parameters.
     * 
     */
    public Optional<String> installerCommandLineParams() {
        return Optional.ofNullable(this.installerCommandLineParams);
    }
    /**
     * @return Kind of resource.
     * 
     */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }
    /**
     * @return License URL.
     * 
     */
    public Optional<String> licenseUrl() {
        return Optional.ofNullable(this.licenseUrl);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if the local version is the latest version; &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     */
    public Optional<Boolean> localIsLatestVersion() {
        return Optional.ofNullable(this.localIsLatestVersion);
    }
    /**
     * @return Local path.
     * 
     */
    public Optional<String> localPath() {
        return Optional.ofNullable(this.localPath);
    }
    /**
     * @return Resource Name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Project URL.
     * 
     */
    public Optional<String> projectUrl() {
        return Optional.ofNullable(this.projectUrl);
    }
    /**
     * @return Provisioning state.
     * 
     */
    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }
    /**
     * @return Published timestamp.
     * 
     */
    public Optional<String> publishedDateTime() {
        return Optional.ofNullable(this.publishedDateTime);
    }
    /**
     * @return Summary description.
     * 
     */
    public Optional<String> summary() {
        return Optional.ofNullable(this.summary);
    }
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Version information.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWebAppSiteExtensionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> authors;
        private @Nullable String comment;
        private @Nullable String description;
        private @Nullable Integer downloadCount;
        private @Nullable String extensionId;
        private @Nullable String extensionType;
        private @Nullable String extensionUrl;
        private @Nullable String feedUrl;
        private @Nullable String iconUrl;
        private String id;
        private @Nullable String installedDateTime;
        private @Nullable String installerCommandLineParams;
        private @Nullable String kind;
        private @Nullable String licenseUrl;
        private @Nullable Boolean localIsLatestVersion;
        private @Nullable String localPath;
        private String name;
        private @Nullable String projectUrl;
        private @Nullable String provisioningState;
        private @Nullable String publishedDateTime;
        private @Nullable String summary;
        private @Nullable String title;
        private String type;
        private @Nullable String version;
        public Builder() {}
        public Builder(GetWebAppSiteExtensionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authors = defaults.authors;
    	      this.comment = defaults.comment;
    	      this.description = defaults.description;
    	      this.downloadCount = defaults.downloadCount;
    	      this.extensionId = defaults.extensionId;
    	      this.extensionType = defaults.extensionType;
    	      this.extensionUrl = defaults.extensionUrl;
    	      this.feedUrl = defaults.feedUrl;
    	      this.iconUrl = defaults.iconUrl;
    	      this.id = defaults.id;
    	      this.installedDateTime = defaults.installedDateTime;
    	      this.installerCommandLineParams = defaults.installerCommandLineParams;
    	      this.kind = defaults.kind;
    	      this.licenseUrl = defaults.licenseUrl;
    	      this.localIsLatestVersion = defaults.localIsLatestVersion;
    	      this.localPath = defaults.localPath;
    	      this.name = defaults.name;
    	      this.projectUrl = defaults.projectUrl;
    	      this.provisioningState = defaults.provisioningState;
    	      this.publishedDateTime = defaults.publishedDateTime;
    	      this.summary = defaults.summary;
    	      this.title = defaults.title;
    	      this.type = defaults.type;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder authors(@Nullable List<String> authors) {
            this.authors = authors;
            return this;
        }
        public Builder authors(String... authors) {
            return authors(List.of(authors));
        }
        @CustomType.Setter
        public Builder comment(@Nullable String comment) {
            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder downloadCount(@Nullable Integer downloadCount) {
            this.downloadCount = downloadCount;
            return this;
        }
        @CustomType.Setter
        public Builder extensionId(@Nullable String extensionId) {
            this.extensionId = extensionId;
            return this;
        }
        @CustomType.Setter
        public Builder extensionType(@Nullable String extensionType) {
            this.extensionType = extensionType;
            return this;
        }
        @CustomType.Setter
        public Builder extensionUrl(@Nullable String extensionUrl) {
            this.extensionUrl = extensionUrl;
            return this;
        }
        @CustomType.Setter
        public Builder feedUrl(@Nullable String feedUrl) {
            this.feedUrl = feedUrl;
            return this;
        }
        @CustomType.Setter
        public Builder iconUrl(@Nullable String iconUrl) {
            this.iconUrl = iconUrl;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder installedDateTime(@Nullable String installedDateTime) {
            this.installedDateTime = installedDateTime;
            return this;
        }
        @CustomType.Setter
        public Builder installerCommandLineParams(@Nullable String installerCommandLineParams) {
            this.installerCommandLineParams = installerCommandLineParams;
            return this;
        }
        @CustomType.Setter
        public Builder kind(@Nullable String kind) {
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder licenseUrl(@Nullable String licenseUrl) {
            this.licenseUrl = licenseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder localIsLatestVersion(@Nullable Boolean localIsLatestVersion) {
            this.localIsLatestVersion = localIsLatestVersion;
            return this;
        }
        @CustomType.Setter
        public Builder localPath(@Nullable String localPath) {
            this.localPath = localPath;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder projectUrl(@Nullable String projectUrl) {
            this.projectUrl = projectUrl;
            return this;
        }
        @CustomType.Setter
        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        @CustomType.Setter
        public Builder publishedDateTime(@Nullable String publishedDateTime) {
            this.publishedDateTime = publishedDateTime;
            return this;
        }
        @CustomType.Setter
        public Builder summary(@Nullable String summary) {
            this.summary = summary;
            return this;
        }
        @CustomType.Setter
        public Builder title(@Nullable String title) {
            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }
        public GetWebAppSiteExtensionResult build() {
            final var o = new GetWebAppSiteExtensionResult();
            o.authors = authors;
            o.comment = comment;
            o.description = description;
            o.downloadCount = downloadCount;
            o.extensionId = extensionId;
            o.extensionType = extensionType;
            o.extensionUrl = extensionUrl;
            o.feedUrl = feedUrl;
            o.iconUrl = iconUrl;
            o.id = id;
            o.installedDateTime = installedDateTime;
            o.installerCommandLineParams = installerCommandLineParams;
            o.kind = kind;
            o.licenseUrl = licenseUrl;
            o.localIsLatestVersion = localIsLatestVersion;
            o.localPath = localPath;
            o.name = name;
            o.projectUrl = projectUrl;
            o.provisioningState = provisioningState;
            o.publishedDateTime = publishedDateTime;
            o.summary = summary;
            o.title = title;
            o.type = type;
            o.version = version;
            return o;
        }
    }
}
