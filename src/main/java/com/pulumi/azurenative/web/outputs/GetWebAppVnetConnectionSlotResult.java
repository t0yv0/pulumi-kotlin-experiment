// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.outputs;

import com.pulumi.azurenative.web.outputs.VnetRouteResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWebAppVnetConnectionSlotResult {
    /**
     * @return A certificate file (.cer) blob containing the public key of the private key used to authenticate a
     * Point-To-Site VPN connection.
     * 
     */
    private @Nullable String certBlob;
    /**
     * @return The client certificate thumbprint.
     * 
     */
    private String certThumbprint;
    /**
     * @return DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.
     * 
     */
    private @Nullable String dnsServers;
    /**
     * @return Resource Id.
     * 
     */
    private String id;
    /**
     * @return Flag that is used to denote if this is VNET injection
     * 
     */
    private @Nullable Boolean isSwift;
    /**
     * @return Kind of resource.
     * 
     */
    private @Nullable String kind;
    /**
     * @return Resource Name.
     * 
     */
    private String name;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if a resync is required; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private Boolean resyncRequired;
    /**
     * @return The routes that this Virtual Network connection uses.
     * 
     */
    private List<VnetRouteResponse> routes;
    /**
     * @return Resource type.
     * 
     */
    private String type;
    /**
     * @return The Virtual Network&#39;s resource ID.
     * 
     */
    private @Nullable String vnetResourceId;

    private GetWebAppVnetConnectionSlotResult() {}
    /**
     * @return A certificate file (.cer) blob containing the public key of the private key used to authenticate a
     * Point-To-Site VPN connection.
     * 
     */
    public Optional<String> certBlob() {
        return Optional.ofNullable(this.certBlob);
    }
    /**
     * @return The client certificate thumbprint.
     * 
     */
    public String certThumbprint() {
        return this.certThumbprint;
    }
    /**
     * @return DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.
     * 
     */
    public Optional<String> dnsServers() {
        return Optional.ofNullable(this.dnsServers);
    }
    /**
     * @return Resource Id.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Flag that is used to denote if this is VNET injection
     * 
     */
    public Optional<Boolean> isSwift() {
        return Optional.ofNullable(this.isSwift);
    }
    /**
     * @return Kind of resource.
     * 
     */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }
    /**
     * @return Resource Name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if a resync is required; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Boolean resyncRequired() {
        return this.resyncRequired;
    }
    /**
     * @return The routes that this Virtual Network connection uses.
     * 
     */
    public List<VnetRouteResponse> routes() {
        return this.routes;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The Virtual Network&#39;s resource ID.
     * 
     */
    public Optional<String> vnetResourceId() {
        return Optional.ofNullable(this.vnetResourceId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWebAppVnetConnectionSlotResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certBlob;
        private String certThumbprint;
        private @Nullable String dnsServers;
        private String id;
        private @Nullable Boolean isSwift;
        private @Nullable String kind;
        private String name;
        private Boolean resyncRequired;
        private List<VnetRouteResponse> routes;
        private String type;
        private @Nullable String vnetResourceId;
        public Builder() {}
        public Builder(GetWebAppVnetConnectionSlotResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certBlob = defaults.certBlob;
    	      this.certThumbprint = defaults.certThumbprint;
    	      this.dnsServers = defaults.dnsServers;
    	      this.id = defaults.id;
    	      this.isSwift = defaults.isSwift;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.resyncRequired = defaults.resyncRequired;
    	      this.routes = defaults.routes;
    	      this.type = defaults.type;
    	      this.vnetResourceId = defaults.vnetResourceId;
        }

        @CustomType.Setter
        public Builder certBlob(@Nullable String certBlob) {
            this.certBlob = certBlob;
            return this;
        }
        @CustomType.Setter
        public Builder certThumbprint(String certThumbprint) {
            this.certThumbprint = Objects.requireNonNull(certThumbprint);
            return this;
        }
        @CustomType.Setter
        public Builder dnsServers(@Nullable String dnsServers) {
            this.dnsServers = dnsServers;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isSwift(@Nullable Boolean isSwift) {
            this.isSwift = isSwift;
            return this;
        }
        @CustomType.Setter
        public Builder kind(@Nullable String kind) {
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder resyncRequired(Boolean resyncRequired) {
            this.resyncRequired = Objects.requireNonNull(resyncRequired);
            return this;
        }
        @CustomType.Setter
        public Builder routes(List<VnetRouteResponse> routes) {
            this.routes = Objects.requireNonNull(routes);
            return this;
        }
        public Builder routes(VnetRouteResponse... routes) {
            return routes(List.of(routes));
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder vnetResourceId(@Nullable String vnetResourceId) {
            this.vnetResourceId = vnetResourceId;
            return this;
        }
        public GetWebAppVnetConnectionSlotResult build() {
            final var o = new GetWebAppVnetConnectionSlotResult();
            o.certBlob = certBlob;
            o.certThumbprint = certThumbprint;
            o.dnsServers = dnsServers;
            o.id = id;
            o.isSwift = isSwift;
            o.kind = kind;
            o.name = name;
            o.resyncRequired = resyncRequired;
            o.routes = routes;
            o.type = type;
            o.vnetResourceId = vnetResourceId;
            return o;
        }
    }
}
