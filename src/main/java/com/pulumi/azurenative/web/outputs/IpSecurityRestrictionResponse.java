// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class IpSecurityRestrictionResponse {
    /**
     * @return Allow or Deny access for this IP range.
     * 
     */
    private @Nullable String action;
    /**
     * @return IP restriction rule description.
     * 
     */
    private @Nullable String description;
    /**
     * @return IP restriction rule headers.
     * X-Forwarded-Host (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples).
     * The matching logic is ..
     * - If the property is null or empty (default), all hosts(or lack of) are allowed.
     * - A value is compared using ordinal-ignore-case (excluding port number).
     * - Subdomain wildcards are permitted but don&#39;t match the root domain. For example, *.contoso.com matches the subdomain foo.contoso.com
     *    but not the root domain contoso.com or multi-level foo.bar.contoso.com
     * - Unicode host names are allowed but are converted to Punycode for matching.
     * 
     * X-Forwarded-For (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).
     * The matching logic is ..
     * - If the property is null or empty (default), any forwarded-for chains (or lack of) are allowed.
     * - If any address (excluding port number) in the chain (comma separated) matches the CIDR defined by the property.
     * 
     * X-Azure-FDID and X-FD-HealthProbe.
     * The matching logic is exact match.
     * 
     */
    private @Nullable Map<String,List<String>> headers;
    /**
     * @return IP address the security restriction is valid for.
     * It can be in form of pure ipv4 address (required SubnetMask property) or
     * CIDR notation such as ipv4/mask (leading bit match). For CIDR,
     * SubnetMask property must not be specified.
     * 
     */
    private @Nullable String ipAddress;
    /**
     * @return IP restriction rule name.
     * 
     */
    private @Nullable String name;
    /**
     * @return Priority of IP restriction rule.
     * 
     */
    private @Nullable Integer priority;
    /**
     * @return Subnet mask for the range of IP addresses the restriction is valid for.
     * 
     */
    private @Nullable String subnetMask;
    /**
     * @return (internal) Subnet traffic tag
     * 
     */
    private @Nullable Integer subnetTrafficTag;
    /**
     * @return Defines what this IP filter will be used for. This is to support IP filtering on proxies.
     * 
     */
    private @Nullable String tag;
    /**
     * @return Virtual network resource id
     * 
     */
    private @Nullable String vnetSubnetResourceId;
    /**
     * @return (internal) Vnet traffic tag
     * 
     */
    private @Nullable Integer vnetTrafficTag;

    private IpSecurityRestrictionResponse() {}
    /**
     * @return Allow or Deny access for this IP range.
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }
    /**
     * @return IP restriction rule description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return IP restriction rule headers.
     * X-Forwarded-Host (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples).
     * The matching logic is ..
     * - If the property is null or empty (default), all hosts(or lack of) are allowed.
     * - A value is compared using ordinal-ignore-case (excluding port number).
     * - Subdomain wildcards are permitted but don&#39;t match the root domain. For example, *.contoso.com matches the subdomain foo.contoso.com
     *    but not the root domain contoso.com or multi-level foo.bar.contoso.com
     * - Unicode host names are allowed but are converted to Punycode for matching.
     * 
     * X-Forwarded-For (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).
     * The matching logic is ..
     * - If the property is null or empty (default), any forwarded-for chains (or lack of) are allowed.
     * - If any address (excluding port number) in the chain (comma separated) matches the CIDR defined by the property.
     * 
     * X-Azure-FDID and X-FD-HealthProbe.
     * The matching logic is exact match.
     * 
     */
    public Map<String,List<String>> headers() {
        return this.headers == null ? Map.of() : this.headers;
    }
    /**
     * @return IP address the security restriction is valid for.
     * It can be in form of pure ipv4 address (required SubnetMask property) or
     * CIDR notation such as ipv4/mask (leading bit match). For CIDR,
     * SubnetMask property must not be specified.
     * 
     */
    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }
    /**
     * @return IP restriction rule name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Priority of IP restriction rule.
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return Subnet mask for the range of IP addresses the restriction is valid for.
     * 
     */
    public Optional<String> subnetMask() {
        return Optional.ofNullable(this.subnetMask);
    }
    /**
     * @return (internal) Subnet traffic tag
     * 
     */
    public Optional<Integer> subnetTrafficTag() {
        return Optional.ofNullable(this.subnetTrafficTag);
    }
    /**
     * @return Defines what this IP filter will be used for. This is to support IP filtering on proxies.
     * 
     */
    public Optional<String> tag() {
        return Optional.ofNullable(this.tag);
    }
    /**
     * @return Virtual network resource id
     * 
     */
    public Optional<String> vnetSubnetResourceId() {
        return Optional.ofNullable(this.vnetSubnetResourceId);
    }
    /**
     * @return (internal) Vnet traffic tag
     * 
     */
    public Optional<Integer> vnetTrafficTag() {
        return Optional.ofNullable(this.vnetTrafficTag);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IpSecurityRestrictionResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String action;
        private @Nullable String description;
        private @Nullable Map<String,List<String>> headers;
        private @Nullable String ipAddress;
        private @Nullable String name;
        private @Nullable Integer priority;
        private @Nullable String subnetMask;
        private @Nullable Integer subnetTrafficTag;
        private @Nullable String tag;
        private @Nullable String vnetSubnetResourceId;
        private @Nullable Integer vnetTrafficTag;
        public Builder() {}
        public Builder(IpSecurityRestrictionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.description = defaults.description;
    	      this.headers = defaults.headers;
    	      this.ipAddress = defaults.ipAddress;
    	      this.name = defaults.name;
    	      this.priority = defaults.priority;
    	      this.subnetMask = defaults.subnetMask;
    	      this.subnetTrafficTag = defaults.subnetTrafficTag;
    	      this.tag = defaults.tag;
    	      this.vnetSubnetResourceId = defaults.vnetSubnetResourceId;
    	      this.vnetTrafficTag = defaults.vnetTrafficTag;
        }

        @CustomType.Setter
        public Builder action(@Nullable String action) {
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder headers(@Nullable Map<String,List<String>> headers) {
            this.headers = headers;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(@Nullable String ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable Integer priority) {
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder subnetMask(@Nullable String subnetMask) {
            this.subnetMask = subnetMask;
            return this;
        }
        @CustomType.Setter
        public Builder subnetTrafficTag(@Nullable Integer subnetTrafficTag) {
            this.subnetTrafficTag = subnetTrafficTag;
            return this;
        }
        @CustomType.Setter
        public Builder tag(@Nullable String tag) {
            this.tag = tag;
            return this;
        }
        @CustomType.Setter
        public Builder vnetSubnetResourceId(@Nullable String vnetSubnetResourceId) {
            this.vnetSubnetResourceId = vnetSubnetResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder vnetTrafficTag(@Nullable Integer vnetTrafficTag) {
            this.vnetTrafficTag = vnetTrafficTag;
            return this;
        }
        public IpSecurityRestrictionResponse build() {
            final var o = new IpSecurityRestrictionResponse();
            o.action = action;
            o.description = description;
            o.headers = headers;
            o.ipAddress = ipAddress;
            o.name = name;
            o.priority = priority;
            o.subnetMask = subnetMask;
            o.subnetTrafficTag = subnetTrafficTag;
            o.tag = tag;
            o.vnetSubnetResourceId = vnetSubnetResourceId;
            o.vnetTrafficTag = vnetTrafficTag;
            return o;
        }
    }
}
