// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class OpenIdConnectConfigResponse {
    /**
     * @return The endpoint to be used to make an authorization request.
     * 
     */
    private @Nullable String authorizationEndpoint;
    /**
     * @return The endpoint that provides the keys necessary to validate the token.
     * 
     */
    private @Nullable String certificationUri;
    /**
     * @return The endpoint that issues the token.
     * 
     */
    private @Nullable String issuer;
    /**
     * @return The endpoint to be used to request a token.
     * 
     */
    private @Nullable String tokenEndpoint;
    /**
     * @return The endpoint that contains all the configuration endpoints for the provider.
     * 
     */
    private @Nullable String wellKnownOpenIdConfiguration;

    private OpenIdConnectConfigResponse() {}
    /**
     * @return The endpoint to be used to make an authorization request.
     * 
     */
    public Optional<String> authorizationEndpoint() {
        return Optional.ofNullable(this.authorizationEndpoint);
    }
    /**
     * @return The endpoint that provides the keys necessary to validate the token.
     * 
     */
    public Optional<String> certificationUri() {
        return Optional.ofNullable(this.certificationUri);
    }
    /**
     * @return The endpoint that issues the token.
     * 
     */
    public Optional<String> issuer() {
        return Optional.ofNullable(this.issuer);
    }
    /**
     * @return The endpoint to be used to request a token.
     * 
     */
    public Optional<String> tokenEndpoint() {
        return Optional.ofNullable(this.tokenEndpoint);
    }
    /**
     * @return The endpoint that contains all the configuration endpoints for the provider.
     * 
     */
    public Optional<String> wellKnownOpenIdConfiguration() {
        return Optional.ofNullable(this.wellKnownOpenIdConfiguration);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OpenIdConnectConfigResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authorizationEndpoint;
        private @Nullable String certificationUri;
        private @Nullable String issuer;
        private @Nullable String tokenEndpoint;
        private @Nullable String wellKnownOpenIdConfiguration;
        public Builder() {}
        public Builder(OpenIdConnectConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationEndpoint = defaults.authorizationEndpoint;
    	      this.certificationUri = defaults.certificationUri;
    	      this.issuer = defaults.issuer;
    	      this.tokenEndpoint = defaults.tokenEndpoint;
    	      this.wellKnownOpenIdConfiguration = defaults.wellKnownOpenIdConfiguration;
        }

        @CustomType.Setter
        public Builder authorizationEndpoint(@Nullable String authorizationEndpoint) {
            this.authorizationEndpoint = authorizationEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder certificationUri(@Nullable String certificationUri) {
            this.certificationUri = certificationUri;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(@Nullable String issuer) {
            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder tokenEndpoint(@Nullable String tokenEndpoint) {
            this.tokenEndpoint = tokenEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder wellKnownOpenIdConfiguration(@Nullable String wellKnownOpenIdConfiguration) {
            this.wellKnownOpenIdConfiguration = wellKnownOpenIdConfiguration;
            return this;
        }
        public OpenIdConnectConfigResponse build() {
            final var o = new OpenIdConnectConfigResponse();
            o.authorizationEndpoint = authorizationEndpoint;
            o.certificationUri = certificationUri;
            o.issuer = issuer;
            o.tokenEndpoint = tokenEndpoint;
            o.wellKnownOpenIdConfiguration = wellKnownOpenIdConfiguration;
            return o;
        }
    }
}
