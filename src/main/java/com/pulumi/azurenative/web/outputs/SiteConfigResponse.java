// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.outputs;

import com.pulumi.azurenative.web.outputs.ApiDefinitionInfoResponse;
import com.pulumi.azurenative.web.outputs.ApiManagementConfigResponse;
import com.pulumi.azurenative.web.outputs.AutoHealRulesResponse;
import com.pulumi.azurenative.web.outputs.AzureStorageInfoValueResponse;
import com.pulumi.azurenative.web.outputs.ConnStringInfoResponse;
import com.pulumi.azurenative.web.outputs.CorsSettingsResponse;
import com.pulumi.azurenative.web.outputs.ExperimentsResponse;
import com.pulumi.azurenative.web.outputs.HandlerMappingResponse;
import com.pulumi.azurenative.web.outputs.IpSecurityRestrictionResponse;
import com.pulumi.azurenative.web.outputs.NameValuePairResponse;
import com.pulumi.azurenative.web.outputs.PushSettingsResponse;
import com.pulumi.azurenative.web.outputs.SiteLimitsResponse;
import com.pulumi.azurenative.web.outputs.SiteMachineKeyResponse;
import com.pulumi.azurenative.web.outputs.VirtualApplicationResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SiteConfigResponse {
    /**
     * @return Flag to use Managed Identity Creds for ACR pull
     * 
     */
    private @Nullable Boolean acrUseManagedIdentityCreds;
    /**
     * @return If using user managed identity, the user managed identity ClientId
     * 
     */
    private @Nullable String acrUserManagedIdentityID;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if Always On is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private @Nullable Boolean alwaysOn;
    /**
     * @return Information about the formal API definition for the app.
     * 
     */
    private @Nullable ApiDefinitionInfoResponse apiDefinition;
    /**
     * @return Azure API management settings linked to the app.
     * 
     */
    private @Nullable ApiManagementConfigResponse apiManagementConfig;
    /**
     * @return App command line to launch.
     * 
     */
    private @Nullable String appCommandLine;
    /**
     * @return Application settings.
     * 
     */
    private @Nullable List<NameValuePairResponse> appSettings;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if Auto Heal is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private @Nullable Boolean autoHealEnabled;
    /**
     * @return Auto Heal rules.
     * 
     */
    private @Nullable AutoHealRulesResponse autoHealRules;
    /**
     * @return Auto-swap slot name.
     * 
     */
    private @Nullable String autoSwapSlotName;
    /**
     * @return List of Azure Storage Accounts.
     * 
     */
    private @Nullable Map<String,AzureStorageInfoValueResponse> azureStorageAccounts;
    /**
     * @return Connection strings.
     * 
     */
    private @Nullable List<ConnStringInfoResponse> connectionStrings;
    /**
     * @return Cross-Origin Resource Sharing (CORS) settings.
     * 
     */
    private @Nullable CorsSettingsResponse cors;
    /**
     * @return Default documents.
     * 
     */
    private @Nullable List<String> defaultDocuments;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if detailed error logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private @Nullable Boolean detailedErrorLoggingEnabled;
    /**
     * @return Document root.
     * 
     */
    private @Nullable String documentRoot;
    /**
     * @return This is work around for polymorphic types.
     * 
     */
    private @Nullable ExperimentsResponse experiments;
    /**
     * @return State of FTP / FTPS service
     * 
     */
    private @Nullable String ftpsState;
    /**
     * @return Maximum number of workers that a site can scale out to.
     * This setting only applies to the Consumption and Elastic Premium Plans
     * 
     */
    private @Nullable Integer functionAppScaleLimit;
    /**
     * @return Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled,
     * the ScaleController will not monitor event sources directly, but will instead call to the
     * runtime to get scale status.
     * 
     */
    private @Nullable Boolean functionsRuntimeScaleMonitoringEnabled;
    /**
     * @return Handler mappings.
     * 
     */
    private @Nullable List<HandlerMappingResponse> handlerMappings;
    /**
     * @return Health check path
     * 
     */
    private @Nullable String healthCheckPath;
    /**
     * @return Http20Enabled: configures a web site to allow clients to connect over http2.0
     * 
     */
    private @Nullable Boolean http20Enabled;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if HTTP logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private @Nullable Boolean httpLoggingEnabled;
    /**
     * @return IP security restrictions for main.
     * 
     */
    private @Nullable List<IpSecurityRestrictionResponse> ipSecurityRestrictions;
    /**
     * @return Java container.
     * 
     */
    private @Nullable String javaContainer;
    /**
     * @return Java container version.
     * 
     */
    private @Nullable String javaContainerVersion;
    /**
     * @return Java version.
     * 
     */
    private @Nullable String javaVersion;
    /**
     * @return Identity to use for Key Vault Reference authentication.
     * 
     */
    private @Nullable String keyVaultReferenceIdentity;
    /**
     * @return Site limits.
     * 
     */
    private @Nullable SiteLimitsResponse limits;
    /**
     * @return Linux App Framework and version
     * 
     */
    private @Nullable String linuxFxVersion;
    /**
     * @return Site load balancing.
     * 
     */
    private @Nullable String loadBalancing;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to enable local MySQL; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private @Nullable Boolean localMySqlEnabled;
    /**
     * @return HTTP logs directory size limit.
     * 
     */
    private @Nullable Integer logsDirectorySizeLimit;
    /**
     * @return Site MachineKey.
     * 
     */
    private SiteMachineKeyResponse machineKey;
    /**
     * @return Managed pipeline mode.
     * 
     */
    private @Nullable String managedPipelineMode;
    /**
     * @return Managed Service Identity Id
     * 
     */
    private @Nullable Integer managedServiceIdentityId;
    /**
     * @return MinTlsVersion: configures the minimum version of TLS required for SSL requests
     * 
     */
    private @Nullable String minTlsVersion;
    /**
     * @return Number of minimum instance count for a site
     * This setting only applies to the Elastic Plans
     * 
     */
    private @Nullable Integer minimumElasticInstanceCount;
    /**
     * @return .NET Framework version.
     * 
     */
    private @Nullable String netFrameworkVersion;
    /**
     * @return Version of Node.js.
     * 
     */
    private @Nullable String nodeVersion;
    /**
     * @return Number of workers.
     * 
     */
    private @Nullable Integer numberOfWorkers;
    /**
     * @return Version of PHP.
     * 
     */
    private @Nullable String phpVersion;
    /**
     * @return Version of PowerShell.
     * 
     */
    private @Nullable String powerShellVersion;
    /**
     * @return Number of preWarmed instances.
     * This setting only applies to the Consumption and Elastic Plans
     * 
     */
    private @Nullable Integer preWarmedInstanceCount;
    /**
     * @return Property to allow or block all public traffic.
     * 
     */
    private @Nullable String publicNetworkAccess;
    /**
     * @return Publishing user name.
     * 
     */
    private @Nullable String publishingUsername;
    /**
     * @return Push endpoint settings.
     * 
     */
    private @Nullable PushSettingsResponse push;
    /**
     * @return Version of Python.
     * 
     */
    private @Nullable String pythonVersion;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if remote debugging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private @Nullable Boolean remoteDebuggingEnabled;
    /**
     * @return Remote debugging version.
     * 
     */
    private @Nullable String remoteDebuggingVersion;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if request tracing is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private @Nullable Boolean requestTracingEnabled;
    /**
     * @return Request tracing expiration time.
     * 
     */
    private @Nullable String requestTracingExpirationTime;
    /**
     * @return IP security restrictions for scm.
     * 
     */
    private @Nullable List<IpSecurityRestrictionResponse> scmIpSecurityRestrictions;
    /**
     * @return IP security restrictions for scm to use main.
     * 
     */
    private @Nullable Boolean scmIpSecurityRestrictionsUseMain;
    /**
     * @return ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site
     * 
     */
    private @Nullable String scmMinTlsVersion;
    /**
     * @return SCM type.
     * 
     */
    private @Nullable String scmType;
    /**
     * @return Tracing options.
     * 
     */
    private @Nullable String tracingOptions;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to use 32-bit worker process; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private @Nullable Boolean use32BitWorkerProcess;
    /**
     * @return Virtual applications.
     * 
     */
    private @Nullable List<VirtualApplicationResponse> virtualApplications;
    /**
     * @return Virtual Network name.
     * 
     */
    private @Nullable String vnetName;
    /**
     * @return The number of private ports assigned to this app. These will be assigned dynamically on runtime.
     * 
     */
    private @Nullable Integer vnetPrivatePortsCount;
    /**
     * @return Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
     * 
     */
    private @Nullable Boolean vnetRouteAllEnabled;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if WebSocket is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private @Nullable Boolean webSocketsEnabled;
    /**
     * @return Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones
     * 
     */
    private @Nullable String websiteTimeZone;
    /**
     * @return Xenon App Framework and version
     * 
     */
    private @Nullable String windowsFxVersion;
    /**
     * @return Explicit Managed Service Identity Id
     * 
     */
    private @Nullable Integer xManagedServiceIdentityId;

    private SiteConfigResponse() {}
    /**
     * @return Flag to use Managed Identity Creds for ACR pull
     * 
     */
    public Optional<Boolean> acrUseManagedIdentityCreds() {
        return Optional.ofNullable(this.acrUseManagedIdentityCreds);
    }
    /**
     * @return If using user managed identity, the user managed identity ClientId
     * 
     */
    public Optional<String> acrUserManagedIdentityID() {
        return Optional.ofNullable(this.acrUserManagedIdentityID);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if Always On is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> alwaysOn() {
        return Optional.ofNullable(this.alwaysOn);
    }
    /**
     * @return Information about the formal API definition for the app.
     * 
     */
    public Optional<ApiDefinitionInfoResponse> apiDefinition() {
        return Optional.ofNullable(this.apiDefinition);
    }
    /**
     * @return Azure API management settings linked to the app.
     * 
     */
    public Optional<ApiManagementConfigResponse> apiManagementConfig() {
        return Optional.ofNullable(this.apiManagementConfig);
    }
    /**
     * @return App command line to launch.
     * 
     */
    public Optional<String> appCommandLine() {
        return Optional.ofNullable(this.appCommandLine);
    }
    /**
     * @return Application settings.
     * 
     */
    public List<NameValuePairResponse> appSettings() {
        return this.appSettings == null ? List.of() : this.appSettings;
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if Auto Heal is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> autoHealEnabled() {
        return Optional.ofNullable(this.autoHealEnabled);
    }
    /**
     * @return Auto Heal rules.
     * 
     */
    public Optional<AutoHealRulesResponse> autoHealRules() {
        return Optional.ofNullable(this.autoHealRules);
    }
    /**
     * @return Auto-swap slot name.
     * 
     */
    public Optional<String> autoSwapSlotName() {
        return Optional.ofNullable(this.autoSwapSlotName);
    }
    /**
     * @return List of Azure Storage Accounts.
     * 
     */
    public Map<String,AzureStorageInfoValueResponse> azureStorageAccounts() {
        return this.azureStorageAccounts == null ? Map.of() : this.azureStorageAccounts;
    }
    /**
     * @return Connection strings.
     * 
     */
    public List<ConnStringInfoResponse> connectionStrings() {
        return this.connectionStrings == null ? List.of() : this.connectionStrings;
    }
    /**
     * @return Cross-Origin Resource Sharing (CORS) settings.
     * 
     */
    public Optional<CorsSettingsResponse> cors() {
        return Optional.ofNullable(this.cors);
    }
    /**
     * @return Default documents.
     * 
     */
    public List<String> defaultDocuments() {
        return this.defaultDocuments == null ? List.of() : this.defaultDocuments;
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if detailed error logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> detailedErrorLoggingEnabled() {
        return Optional.ofNullable(this.detailedErrorLoggingEnabled);
    }
    /**
     * @return Document root.
     * 
     */
    public Optional<String> documentRoot() {
        return Optional.ofNullable(this.documentRoot);
    }
    /**
     * @return This is work around for polymorphic types.
     * 
     */
    public Optional<ExperimentsResponse> experiments() {
        return Optional.ofNullable(this.experiments);
    }
    /**
     * @return State of FTP / FTPS service
     * 
     */
    public Optional<String> ftpsState() {
        return Optional.ofNullable(this.ftpsState);
    }
    /**
     * @return Maximum number of workers that a site can scale out to.
     * This setting only applies to the Consumption and Elastic Premium Plans
     * 
     */
    public Optional<Integer> functionAppScaleLimit() {
        return Optional.ofNullable(this.functionAppScaleLimit);
    }
    /**
     * @return Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled,
     * the ScaleController will not monitor event sources directly, but will instead call to the
     * runtime to get scale status.
     * 
     */
    public Optional<Boolean> functionsRuntimeScaleMonitoringEnabled() {
        return Optional.ofNullable(this.functionsRuntimeScaleMonitoringEnabled);
    }
    /**
     * @return Handler mappings.
     * 
     */
    public List<HandlerMappingResponse> handlerMappings() {
        return this.handlerMappings == null ? List.of() : this.handlerMappings;
    }
    /**
     * @return Health check path
     * 
     */
    public Optional<String> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }
    /**
     * @return Http20Enabled: configures a web site to allow clients to connect over http2.0
     * 
     */
    public Optional<Boolean> http20Enabled() {
        return Optional.ofNullable(this.http20Enabled);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if HTTP logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> httpLoggingEnabled() {
        return Optional.ofNullable(this.httpLoggingEnabled);
    }
    /**
     * @return IP security restrictions for main.
     * 
     */
    public List<IpSecurityRestrictionResponse> ipSecurityRestrictions() {
        return this.ipSecurityRestrictions == null ? List.of() : this.ipSecurityRestrictions;
    }
    /**
     * @return Java container.
     * 
     */
    public Optional<String> javaContainer() {
        return Optional.ofNullable(this.javaContainer);
    }
    /**
     * @return Java container version.
     * 
     */
    public Optional<String> javaContainerVersion() {
        return Optional.ofNullable(this.javaContainerVersion);
    }
    /**
     * @return Java version.
     * 
     */
    public Optional<String> javaVersion() {
        return Optional.ofNullable(this.javaVersion);
    }
    /**
     * @return Identity to use for Key Vault Reference authentication.
     * 
     */
    public Optional<String> keyVaultReferenceIdentity() {
        return Optional.ofNullable(this.keyVaultReferenceIdentity);
    }
    /**
     * @return Site limits.
     * 
     */
    public Optional<SiteLimitsResponse> limits() {
        return Optional.ofNullable(this.limits);
    }
    /**
     * @return Linux App Framework and version
     * 
     */
    public Optional<String> linuxFxVersion() {
        return Optional.ofNullable(this.linuxFxVersion);
    }
    /**
     * @return Site load balancing.
     * 
     */
    public Optional<String> loadBalancing() {
        return Optional.ofNullable(this.loadBalancing);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to enable local MySQL; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> localMySqlEnabled() {
        return Optional.ofNullable(this.localMySqlEnabled);
    }
    /**
     * @return HTTP logs directory size limit.
     * 
     */
    public Optional<Integer> logsDirectorySizeLimit() {
        return Optional.ofNullable(this.logsDirectorySizeLimit);
    }
    /**
     * @return Site MachineKey.
     * 
     */
    public SiteMachineKeyResponse machineKey() {
        return this.machineKey;
    }
    /**
     * @return Managed pipeline mode.
     * 
     */
    public Optional<String> managedPipelineMode() {
        return Optional.ofNullable(this.managedPipelineMode);
    }
    /**
     * @return Managed Service Identity Id
     * 
     */
    public Optional<Integer> managedServiceIdentityId() {
        return Optional.ofNullable(this.managedServiceIdentityId);
    }
    /**
     * @return MinTlsVersion: configures the minimum version of TLS required for SSL requests
     * 
     */
    public Optional<String> minTlsVersion() {
        return Optional.ofNullable(this.minTlsVersion);
    }
    /**
     * @return Number of minimum instance count for a site
     * This setting only applies to the Elastic Plans
     * 
     */
    public Optional<Integer> minimumElasticInstanceCount() {
        return Optional.ofNullable(this.minimumElasticInstanceCount);
    }
    /**
     * @return .NET Framework version.
     * 
     */
    public Optional<String> netFrameworkVersion() {
        return Optional.ofNullable(this.netFrameworkVersion);
    }
    /**
     * @return Version of Node.js.
     * 
     */
    public Optional<String> nodeVersion() {
        return Optional.ofNullable(this.nodeVersion);
    }
    /**
     * @return Number of workers.
     * 
     */
    public Optional<Integer> numberOfWorkers() {
        return Optional.ofNullable(this.numberOfWorkers);
    }
    /**
     * @return Version of PHP.
     * 
     */
    public Optional<String> phpVersion() {
        return Optional.ofNullable(this.phpVersion);
    }
    /**
     * @return Version of PowerShell.
     * 
     */
    public Optional<String> powerShellVersion() {
        return Optional.ofNullable(this.powerShellVersion);
    }
    /**
     * @return Number of preWarmed instances.
     * This setting only applies to the Consumption and Elastic Plans
     * 
     */
    public Optional<Integer> preWarmedInstanceCount() {
        return Optional.ofNullable(this.preWarmedInstanceCount);
    }
    /**
     * @return Property to allow or block all public traffic.
     * 
     */
    public Optional<String> publicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }
    /**
     * @return Publishing user name.
     * 
     */
    public Optional<String> publishingUsername() {
        return Optional.ofNullable(this.publishingUsername);
    }
    /**
     * @return Push endpoint settings.
     * 
     */
    public Optional<PushSettingsResponse> push() {
        return Optional.ofNullable(this.push);
    }
    /**
     * @return Version of Python.
     * 
     */
    public Optional<String> pythonVersion() {
        return Optional.ofNullable(this.pythonVersion);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if remote debugging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> remoteDebuggingEnabled() {
        return Optional.ofNullable(this.remoteDebuggingEnabled);
    }
    /**
     * @return Remote debugging version.
     * 
     */
    public Optional<String> remoteDebuggingVersion() {
        return Optional.ofNullable(this.remoteDebuggingVersion);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if request tracing is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> requestTracingEnabled() {
        return Optional.ofNullable(this.requestTracingEnabled);
    }
    /**
     * @return Request tracing expiration time.
     * 
     */
    public Optional<String> requestTracingExpirationTime() {
        return Optional.ofNullable(this.requestTracingExpirationTime);
    }
    /**
     * @return IP security restrictions for scm.
     * 
     */
    public List<IpSecurityRestrictionResponse> scmIpSecurityRestrictions() {
        return this.scmIpSecurityRestrictions == null ? List.of() : this.scmIpSecurityRestrictions;
    }
    /**
     * @return IP security restrictions for scm to use main.
     * 
     */
    public Optional<Boolean> scmIpSecurityRestrictionsUseMain() {
        return Optional.ofNullable(this.scmIpSecurityRestrictionsUseMain);
    }
    /**
     * @return ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site
     * 
     */
    public Optional<String> scmMinTlsVersion() {
        return Optional.ofNullable(this.scmMinTlsVersion);
    }
    /**
     * @return SCM type.
     * 
     */
    public Optional<String> scmType() {
        return Optional.ofNullable(this.scmType);
    }
    /**
     * @return Tracing options.
     * 
     */
    public Optional<String> tracingOptions() {
        return Optional.ofNullable(this.tracingOptions);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to use 32-bit worker process; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> use32BitWorkerProcess() {
        return Optional.ofNullable(this.use32BitWorkerProcess);
    }
    /**
     * @return Virtual applications.
     * 
     */
    public List<VirtualApplicationResponse> virtualApplications() {
        return this.virtualApplications == null ? List.of() : this.virtualApplications;
    }
    /**
     * @return Virtual Network name.
     * 
     */
    public Optional<String> vnetName() {
        return Optional.ofNullable(this.vnetName);
    }
    /**
     * @return The number of private ports assigned to this app. These will be assigned dynamically on runtime.
     * 
     */
    public Optional<Integer> vnetPrivatePortsCount() {
        return Optional.ofNullable(this.vnetPrivatePortsCount);
    }
    /**
     * @return Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
     * 
     */
    public Optional<Boolean> vnetRouteAllEnabled() {
        return Optional.ofNullable(this.vnetRouteAllEnabled);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if WebSocket is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> webSocketsEnabled() {
        return Optional.ofNullable(this.webSocketsEnabled);
    }
    /**
     * @return Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones
     * 
     */
    public Optional<String> websiteTimeZone() {
        return Optional.ofNullable(this.websiteTimeZone);
    }
    /**
     * @return Xenon App Framework and version
     * 
     */
    public Optional<String> windowsFxVersion() {
        return Optional.ofNullable(this.windowsFxVersion);
    }
    /**
     * @return Explicit Managed Service Identity Id
     * 
     */
    public Optional<Integer> xManagedServiceIdentityId() {
        return Optional.ofNullable(this.xManagedServiceIdentityId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SiteConfigResponse defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean acrUseManagedIdentityCreds;
        private @Nullable String acrUserManagedIdentityID;
        private @Nullable Boolean alwaysOn;
        private @Nullable ApiDefinitionInfoResponse apiDefinition;
        private @Nullable ApiManagementConfigResponse apiManagementConfig;
        private @Nullable String appCommandLine;
        private @Nullable List<NameValuePairResponse> appSettings;
        private @Nullable Boolean autoHealEnabled;
        private @Nullable AutoHealRulesResponse autoHealRules;
        private @Nullable String autoSwapSlotName;
        private @Nullable Map<String,AzureStorageInfoValueResponse> azureStorageAccounts;
        private @Nullable List<ConnStringInfoResponse> connectionStrings;
        private @Nullable CorsSettingsResponse cors;
        private @Nullable List<String> defaultDocuments;
        private @Nullable Boolean detailedErrorLoggingEnabled;
        private @Nullable String documentRoot;
        private @Nullable ExperimentsResponse experiments;
        private @Nullable String ftpsState;
        private @Nullable Integer functionAppScaleLimit;
        private @Nullable Boolean functionsRuntimeScaleMonitoringEnabled;
        private @Nullable List<HandlerMappingResponse> handlerMappings;
        private @Nullable String healthCheckPath;
        private @Nullable Boolean http20Enabled;
        private @Nullable Boolean httpLoggingEnabled;
        private @Nullable List<IpSecurityRestrictionResponse> ipSecurityRestrictions;
        private @Nullable String javaContainer;
        private @Nullable String javaContainerVersion;
        private @Nullable String javaVersion;
        private @Nullable String keyVaultReferenceIdentity;
        private @Nullable SiteLimitsResponse limits;
        private @Nullable String linuxFxVersion;
        private @Nullable String loadBalancing;
        private @Nullable Boolean localMySqlEnabled;
        private @Nullable Integer logsDirectorySizeLimit;
        private SiteMachineKeyResponse machineKey;
        private @Nullable String managedPipelineMode;
        private @Nullable Integer managedServiceIdentityId;
        private @Nullable String minTlsVersion;
        private @Nullable Integer minimumElasticInstanceCount;
        private @Nullable String netFrameworkVersion;
        private @Nullable String nodeVersion;
        private @Nullable Integer numberOfWorkers;
        private @Nullable String phpVersion;
        private @Nullable String powerShellVersion;
        private @Nullable Integer preWarmedInstanceCount;
        private @Nullable String publicNetworkAccess;
        private @Nullable String publishingUsername;
        private @Nullable PushSettingsResponse push;
        private @Nullable String pythonVersion;
        private @Nullable Boolean remoteDebuggingEnabled;
        private @Nullable String remoteDebuggingVersion;
        private @Nullable Boolean requestTracingEnabled;
        private @Nullable String requestTracingExpirationTime;
        private @Nullable List<IpSecurityRestrictionResponse> scmIpSecurityRestrictions;
        private @Nullable Boolean scmIpSecurityRestrictionsUseMain;
        private @Nullable String scmMinTlsVersion;
        private @Nullable String scmType;
        private @Nullable String tracingOptions;
        private @Nullable Boolean use32BitWorkerProcess;
        private @Nullable List<VirtualApplicationResponse> virtualApplications;
        private @Nullable String vnetName;
        private @Nullable Integer vnetPrivatePortsCount;
        private @Nullable Boolean vnetRouteAllEnabled;
        private @Nullable Boolean webSocketsEnabled;
        private @Nullable String websiteTimeZone;
        private @Nullable String windowsFxVersion;
        private @Nullable Integer xManagedServiceIdentityId;
        public Builder() {}
        public Builder(SiteConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acrUseManagedIdentityCreds = defaults.acrUseManagedIdentityCreds;
    	      this.acrUserManagedIdentityID = defaults.acrUserManagedIdentityID;
    	      this.alwaysOn = defaults.alwaysOn;
    	      this.apiDefinition = defaults.apiDefinition;
    	      this.apiManagementConfig = defaults.apiManagementConfig;
    	      this.appCommandLine = defaults.appCommandLine;
    	      this.appSettings = defaults.appSettings;
    	      this.autoHealEnabled = defaults.autoHealEnabled;
    	      this.autoHealRules = defaults.autoHealRules;
    	      this.autoSwapSlotName = defaults.autoSwapSlotName;
    	      this.azureStorageAccounts = defaults.azureStorageAccounts;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.cors = defaults.cors;
    	      this.defaultDocuments = defaults.defaultDocuments;
    	      this.detailedErrorLoggingEnabled = defaults.detailedErrorLoggingEnabled;
    	      this.documentRoot = defaults.documentRoot;
    	      this.experiments = defaults.experiments;
    	      this.ftpsState = defaults.ftpsState;
    	      this.functionAppScaleLimit = defaults.functionAppScaleLimit;
    	      this.functionsRuntimeScaleMonitoringEnabled = defaults.functionsRuntimeScaleMonitoringEnabled;
    	      this.handlerMappings = defaults.handlerMappings;
    	      this.healthCheckPath = defaults.healthCheckPath;
    	      this.http20Enabled = defaults.http20Enabled;
    	      this.httpLoggingEnabled = defaults.httpLoggingEnabled;
    	      this.ipSecurityRestrictions = defaults.ipSecurityRestrictions;
    	      this.javaContainer = defaults.javaContainer;
    	      this.javaContainerVersion = defaults.javaContainerVersion;
    	      this.javaVersion = defaults.javaVersion;
    	      this.keyVaultReferenceIdentity = defaults.keyVaultReferenceIdentity;
    	      this.limits = defaults.limits;
    	      this.linuxFxVersion = defaults.linuxFxVersion;
    	      this.loadBalancing = defaults.loadBalancing;
    	      this.localMySqlEnabled = defaults.localMySqlEnabled;
    	      this.logsDirectorySizeLimit = defaults.logsDirectorySizeLimit;
    	      this.machineKey = defaults.machineKey;
    	      this.managedPipelineMode = defaults.managedPipelineMode;
    	      this.managedServiceIdentityId = defaults.managedServiceIdentityId;
    	      this.minTlsVersion = defaults.minTlsVersion;
    	      this.minimumElasticInstanceCount = defaults.minimumElasticInstanceCount;
    	      this.netFrameworkVersion = defaults.netFrameworkVersion;
    	      this.nodeVersion = defaults.nodeVersion;
    	      this.numberOfWorkers = defaults.numberOfWorkers;
    	      this.phpVersion = defaults.phpVersion;
    	      this.powerShellVersion = defaults.powerShellVersion;
    	      this.preWarmedInstanceCount = defaults.preWarmedInstanceCount;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.publishingUsername = defaults.publishingUsername;
    	      this.push = defaults.push;
    	      this.pythonVersion = defaults.pythonVersion;
    	      this.remoteDebuggingEnabled = defaults.remoteDebuggingEnabled;
    	      this.remoteDebuggingVersion = defaults.remoteDebuggingVersion;
    	      this.requestTracingEnabled = defaults.requestTracingEnabled;
    	      this.requestTracingExpirationTime = defaults.requestTracingExpirationTime;
    	      this.scmIpSecurityRestrictions = defaults.scmIpSecurityRestrictions;
    	      this.scmIpSecurityRestrictionsUseMain = defaults.scmIpSecurityRestrictionsUseMain;
    	      this.scmMinTlsVersion = defaults.scmMinTlsVersion;
    	      this.scmType = defaults.scmType;
    	      this.tracingOptions = defaults.tracingOptions;
    	      this.use32BitWorkerProcess = defaults.use32BitWorkerProcess;
    	      this.virtualApplications = defaults.virtualApplications;
    	      this.vnetName = defaults.vnetName;
    	      this.vnetPrivatePortsCount = defaults.vnetPrivatePortsCount;
    	      this.vnetRouteAllEnabled = defaults.vnetRouteAllEnabled;
    	      this.webSocketsEnabled = defaults.webSocketsEnabled;
    	      this.websiteTimeZone = defaults.websiteTimeZone;
    	      this.windowsFxVersion = defaults.windowsFxVersion;
    	      this.xManagedServiceIdentityId = defaults.xManagedServiceIdentityId;
        }

        @CustomType.Setter
        public Builder acrUseManagedIdentityCreds(@Nullable Boolean acrUseManagedIdentityCreds) {
            this.acrUseManagedIdentityCreds = acrUseManagedIdentityCreds;
            return this;
        }
        @CustomType.Setter
        public Builder acrUserManagedIdentityID(@Nullable String acrUserManagedIdentityID) {
            this.acrUserManagedIdentityID = acrUserManagedIdentityID;
            return this;
        }
        @CustomType.Setter
        public Builder alwaysOn(@Nullable Boolean alwaysOn) {
            this.alwaysOn = alwaysOn;
            return this;
        }
        @CustomType.Setter
        public Builder apiDefinition(@Nullable ApiDefinitionInfoResponse apiDefinition) {
            this.apiDefinition = apiDefinition;
            return this;
        }
        @CustomType.Setter
        public Builder apiManagementConfig(@Nullable ApiManagementConfigResponse apiManagementConfig) {
            this.apiManagementConfig = apiManagementConfig;
            return this;
        }
        @CustomType.Setter
        public Builder appCommandLine(@Nullable String appCommandLine) {
            this.appCommandLine = appCommandLine;
            return this;
        }
        @CustomType.Setter
        public Builder appSettings(@Nullable List<NameValuePairResponse> appSettings) {
            this.appSettings = appSettings;
            return this;
        }
        public Builder appSettings(NameValuePairResponse... appSettings) {
            return appSettings(List.of(appSettings));
        }
        @CustomType.Setter
        public Builder autoHealEnabled(@Nullable Boolean autoHealEnabled) {
            this.autoHealEnabled = autoHealEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder autoHealRules(@Nullable AutoHealRulesResponse autoHealRules) {
            this.autoHealRules = autoHealRules;
            return this;
        }
        @CustomType.Setter
        public Builder autoSwapSlotName(@Nullable String autoSwapSlotName) {
            this.autoSwapSlotName = autoSwapSlotName;
            return this;
        }
        @CustomType.Setter
        public Builder azureStorageAccounts(@Nullable Map<String,AzureStorageInfoValueResponse> azureStorageAccounts) {
            this.azureStorageAccounts = azureStorageAccounts;
            return this;
        }
        @CustomType.Setter
        public Builder connectionStrings(@Nullable List<ConnStringInfoResponse> connectionStrings) {
            this.connectionStrings = connectionStrings;
            return this;
        }
        public Builder connectionStrings(ConnStringInfoResponse... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }
        @CustomType.Setter
        public Builder cors(@Nullable CorsSettingsResponse cors) {
            this.cors = cors;
            return this;
        }
        @CustomType.Setter
        public Builder defaultDocuments(@Nullable List<String> defaultDocuments) {
            this.defaultDocuments = defaultDocuments;
            return this;
        }
        public Builder defaultDocuments(String... defaultDocuments) {
            return defaultDocuments(List.of(defaultDocuments));
        }
        @CustomType.Setter
        public Builder detailedErrorLoggingEnabled(@Nullable Boolean detailedErrorLoggingEnabled) {
            this.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder documentRoot(@Nullable String documentRoot) {
            this.documentRoot = documentRoot;
            return this;
        }
        @CustomType.Setter
        public Builder experiments(@Nullable ExperimentsResponse experiments) {
            this.experiments = experiments;
            return this;
        }
        @CustomType.Setter
        public Builder ftpsState(@Nullable String ftpsState) {
            this.ftpsState = ftpsState;
            return this;
        }
        @CustomType.Setter
        public Builder functionAppScaleLimit(@Nullable Integer functionAppScaleLimit) {
            this.functionAppScaleLimit = functionAppScaleLimit;
            return this;
        }
        @CustomType.Setter
        public Builder functionsRuntimeScaleMonitoringEnabled(@Nullable Boolean functionsRuntimeScaleMonitoringEnabled) {
            this.functionsRuntimeScaleMonitoringEnabled = functionsRuntimeScaleMonitoringEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder handlerMappings(@Nullable List<HandlerMappingResponse> handlerMappings) {
            this.handlerMappings = handlerMappings;
            return this;
        }
        public Builder handlerMappings(HandlerMappingResponse... handlerMappings) {
            return handlerMappings(List.of(handlerMappings));
        }
        @CustomType.Setter
        public Builder healthCheckPath(@Nullable String healthCheckPath) {
            this.healthCheckPath = healthCheckPath;
            return this;
        }
        @CustomType.Setter
        public Builder http20Enabled(@Nullable Boolean http20Enabled) {
            this.http20Enabled = http20Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder httpLoggingEnabled(@Nullable Boolean httpLoggingEnabled) {
            this.httpLoggingEnabled = httpLoggingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder ipSecurityRestrictions(@Nullable List<IpSecurityRestrictionResponse> ipSecurityRestrictions) {
            this.ipSecurityRestrictions = ipSecurityRestrictions;
            return this;
        }
        public Builder ipSecurityRestrictions(IpSecurityRestrictionResponse... ipSecurityRestrictions) {
            return ipSecurityRestrictions(List.of(ipSecurityRestrictions));
        }
        @CustomType.Setter
        public Builder javaContainer(@Nullable String javaContainer) {
            this.javaContainer = javaContainer;
            return this;
        }
        @CustomType.Setter
        public Builder javaContainerVersion(@Nullable String javaContainerVersion) {
            this.javaContainerVersion = javaContainerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder javaVersion(@Nullable String javaVersion) {
            this.javaVersion = javaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder keyVaultReferenceIdentity(@Nullable String keyVaultReferenceIdentity) {
            this.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
            return this;
        }
        @CustomType.Setter
        public Builder limits(@Nullable SiteLimitsResponse limits) {
            this.limits = limits;
            return this;
        }
        @CustomType.Setter
        public Builder linuxFxVersion(@Nullable String linuxFxVersion) {
            this.linuxFxVersion = linuxFxVersion;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancing(@Nullable String loadBalancing) {
            this.loadBalancing = loadBalancing;
            return this;
        }
        @CustomType.Setter
        public Builder localMySqlEnabled(@Nullable Boolean localMySqlEnabled) {
            this.localMySqlEnabled = localMySqlEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder logsDirectorySizeLimit(@Nullable Integer logsDirectorySizeLimit) {
            this.logsDirectorySizeLimit = logsDirectorySizeLimit;
            return this;
        }
        @CustomType.Setter
        public Builder machineKey(SiteMachineKeyResponse machineKey) {
            this.machineKey = Objects.requireNonNull(machineKey);
            return this;
        }
        @CustomType.Setter
        public Builder managedPipelineMode(@Nullable String managedPipelineMode) {
            this.managedPipelineMode = managedPipelineMode;
            return this;
        }
        @CustomType.Setter
        public Builder managedServiceIdentityId(@Nullable Integer managedServiceIdentityId) {
            this.managedServiceIdentityId = managedServiceIdentityId;
            return this;
        }
        @CustomType.Setter
        public Builder minTlsVersion(@Nullable String minTlsVersion) {
            this.minTlsVersion = minTlsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder minimumElasticInstanceCount(@Nullable Integer minimumElasticInstanceCount) {
            this.minimumElasticInstanceCount = minimumElasticInstanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder netFrameworkVersion(@Nullable String netFrameworkVersion) {
            this.netFrameworkVersion = netFrameworkVersion;
            return this;
        }
        @CustomType.Setter
        public Builder nodeVersion(@Nullable String nodeVersion) {
            this.nodeVersion = nodeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfWorkers(@Nullable Integer numberOfWorkers) {
            this.numberOfWorkers = numberOfWorkers;
            return this;
        }
        @CustomType.Setter
        public Builder phpVersion(@Nullable String phpVersion) {
            this.phpVersion = phpVersion;
            return this;
        }
        @CustomType.Setter
        public Builder powerShellVersion(@Nullable String powerShellVersion) {
            this.powerShellVersion = powerShellVersion;
            return this;
        }
        @CustomType.Setter
        public Builder preWarmedInstanceCount(@Nullable Integer preWarmedInstanceCount) {
            this.preWarmedInstanceCount = preWarmedInstanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder publicNetworkAccess(@Nullable String publicNetworkAccess) {
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }
        @CustomType.Setter
        public Builder publishingUsername(@Nullable String publishingUsername) {
            this.publishingUsername = publishingUsername;
            return this;
        }
        @CustomType.Setter
        public Builder push(@Nullable PushSettingsResponse push) {
            this.push = push;
            return this;
        }
        @CustomType.Setter
        public Builder pythonVersion(@Nullable String pythonVersion) {
            this.pythonVersion = pythonVersion;
            return this;
        }
        @CustomType.Setter
        public Builder remoteDebuggingEnabled(@Nullable Boolean remoteDebuggingEnabled) {
            this.remoteDebuggingEnabled = remoteDebuggingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder remoteDebuggingVersion(@Nullable String remoteDebuggingVersion) {
            this.remoteDebuggingVersion = remoteDebuggingVersion;
            return this;
        }
        @CustomType.Setter
        public Builder requestTracingEnabled(@Nullable Boolean requestTracingEnabled) {
            this.requestTracingEnabled = requestTracingEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder requestTracingExpirationTime(@Nullable String requestTracingExpirationTime) {
            this.requestTracingExpirationTime = requestTracingExpirationTime;
            return this;
        }
        @CustomType.Setter
        public Builder scmIpSecurityRestrictions(@Nullable List<IpSecurityRestrictionResponse> scmIpSecurityRestrictions) {
            this.scmIpSecurityRestrictions = scmIpSecurityRestrictions;
            return this;
        }
        public Builder scmIpSecurityRestrictions(IpSecurityRestrictionResponse... scmIpSecurityRestrictions) {
            return scmIpSecurityRestrictions(List.of(scmIpSecurityRestrictions));
        }
        @CustomType.Setter
        public Builder scmIpSecurityRestrictionsUseMain(@Nullable Boolean scmIpSecurityRestrictionsUseMain) {
            this.scmIpSecurityRestrictionsUseMain = scmIpSecurityRestrictionsUseMain;
            return this;
        }
        @CustomType.Setter
        public Builder scmMinTlsVersion(@Nullable String scmMinTlsVersion) {
            this.scmMinTlsVersion = scmMinTlsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder scmType(@Nullable String scmType) {
            this.scmType = scmType;
            return this;
        }
        @CustomType.Setter
        public Builder tracingOptions(@Nullable String tracingOptions) {
            this.tracingOptions = tracingOptions;
            return this;
        }
        @CustomType.Setter
        public Builder use32BitWorkerProcess(@Nullable Boolean use32BitWorkerProcess) {
            this.use32BitWorkerProcess = use32BitWorkerProcess;
            return this;
        }
        @CustomType.Setter
        public Builder virtualApplications(@Nullable List<VirtualApplicationResponse> virtualApplications) {
            this.virtualApplications = virtualApplications;
            return this;
        }
        public Builder virtualApplications(VirtualApplicationResponse... virtualApplications) {
            return virtualApplications(List.of(virtualApplications));
        }
        @CustomType.Setter
        public Builder vnetName(@Nullable String vnetName) {
            this.vnetName = vnetName;
            return this;
        }
        @CustomType.Setter
        public Builder vnetPrivatePortsCount(@Nullable Integer vnetPrivatePortsCount) {
            this.vnetPrivatePortsCount = vnetPrivatePortsCount;
            return this;
        }
        @CustomType.Setter
        public Builder vnetRouteAllEnabled(@Nullable Boolean vnetRouteAllEnabled) {
            this.vnetRouteAllEnabled = vnetRouteAllEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder webSocketsEnabled(@Nullable Boolean webSocketsEnabled) {
            this.webSocketsEnabled = webSocketsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder websiteTimeZone(@Nullable String websiteTimeZone) {
            this.websiteTimeZone = websiteTimeZone;
            return this;
        }
        @CustomType.Setter
        public Builder windowsFxVersion(@Nullable String windowsFxVersion) {
            this.windowsFxVersion = windowsFxVersion;
            return this;
        }
        @CustomType.Setter
        public Builder xManagedServiceIdentityId(@Nullable Integer xManagedServiceIdentityId) {
            this.xManagedServiceIdentityId = xManagedServiceIdentityId;
            return this;
        }
        public SiteConfigResponse build() {
            final var o = new SiteConfigResponse();
            o.acrUseManagedIdentityCreds = acrUseManagedIdentityCreds;
            o.acrUserManagedIdentityID = acrUserManagedIdentityID;
            o.alwaysOn = alwaysOn;
            o.apiDefinition = apiDefinition;
            o.apiManagementConfig = apiManagementConfig;
            o.appCommandLine = appCommandLine;
            o.appSettings = appSettings;
            o.autoHealEnabled = autoHealEnabled;
            o.autoHealRules = autoHealRules;
            o.autoSwapSlotName = autoSwapSlotName;
            o.azureStorageAccounts = azureStorageAccounts;
            o.connectionStrings = connectionStrings;
            o.cors = cors;
            o.defaultDocuments = defaultDocuments;
            o.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
            o.documentRoot = documentRoot;
            o.experiments = experiments;
            o.ftpsState = ftpsState;
            o.functionAppScaleLimit = functionAppScaleLimit;
            o.functionsRuntimeScaleMonitoringEnabled = functionsRuntimeScaleMonitoringEnabled;
            o.handlerMappings = handlerMappings;
            o.healthCheckPath = healthCheckPath;
            o.http20Enabled = http20Enabled;
            o.httpLoggingEnabled = httpLoggingEnabled;
            o.ipSecurityRestrictions = ipSecurityRestrictions;
            o.javaContainer = javaContainer;
            o.javaContainerVersion = javaContainerVersion;
            o.javaVersion = javaVersion;
            o.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
            o.limits = limits;
            o.linuxFxVersion = linuxFxVersion;
            o.loadBalancing = loadBalancing;
            o.localMySqlEnabled = localMySqlEnabled;
            o.logsDirectorySizeLimit = logsDirectorySizeLimit;
            o.machineKey = machineKey;
            o.managedPipelineMode = managedPipelineMode;
            o.managedServiceIdentityId = managedServiceIdentityId;
            o.minTlsVersion = minTlsVersion;
            o.minimumElasticInstanceCount = minimumElasticInstanceCount;
            o.netFrameworkVersion = netFrameworkVersion;
            o.nodeVersion = nodeVersion;
            o.numberOfWorkers = numberOfWorkers;
            o.phpVersion = phpVersion;
            o.powerShellVersion = powerShellVersion;
            o.preWarmedInstanceCount = preWarmedInstanceCount;
            o.publicNetworkAccess = publicNetworkAccess;
            o.publishingUsername = publishingUsername;
            o.push = push;
            o.pythonVersion = pythonVersion;
            o.remoteDebuggingEnabled = remoteDebuggingEnabled;
            o.remoteDebuggingVersion = remoteDebuggingVersion;
            o.requestTracingEnabled = requestTracingEnabled;
            o.requestTracingExpirationTime = requestTracingExpirationTime;
            o.scmIpSecurityRestrictions = scmIpSecurityRestrictions;
            o.scmIpSecurityRestrictionsUseMain = scmIpSecurityRestrictionsUseMain;
            o.scmMinTlsVersion = scmMinTlsVersion;
            o.scmType = scmType;
            o.tracingOptions = tracingOptions;
            o.use32BitWorkerProcess = use32BitWorkerProcess;
            o.virtualApplications = virtualApplications;
            o.vnetName = vnetName;
            o.vnetPrivatePortsCount = vnetPrivatePortsCount;
            o.vnetRouteAllEnabled = vnetRouteAllEnabled;
            o.webSocketsEnabled = webSocketsEnabled;
            o.websiteTimeZone = websiteTimeZone;
            o.windowsFxVersion = windowsFxVersion;
            o.xManagedServiceIdentityId = xManagedServiceIdentityId;
            return o;
        }
    }
}
